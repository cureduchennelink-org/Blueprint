// Generated by CoffeeScript 1.9.2
(function() {
  var Kit, _log,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    slice = [].slice;

  _log = {
    debug: console.log
  };

  Kit = (function() {
    function Kit() {
      this.new_service = bind(this.new_service, this);
      this.services = {};
      this.routes = {};
    }

    Kit.prototype.get_service_deps_needed = function(name, constructor) {
      var d, f, i, len, needed, nm, ref;
      f = 'Kit::get_service_deps_needed: ';
      d = constructor.deps;
      if (!d) {
        throw new Error(f + ("Module '" + name + "' is missing @deps - ") + JSON.stringify(constructor));
      }
      needed = [];
      ref = d.services || [];
      for (i = 0, len = ref.length; i < len; i++) {
        nm = ref[i];
        if (!(nm in this.services)) {
          needed.push(nm);
        }
      }
      if (d.mysql || d.mongo) {
        needed.push('db');
      }
      return needed;
    };

    Kit.prototype.add_service = function(name, obj) {
      this.services[name] = obj;
      if (name === 'logger') {
        _log = this.services[name].log;
      }
      return this.services[name];
    };

    Kit.prototype.new_service = function(name, constructor, args) {
      var _a, _t, d, f, i, len, n, needs, ref;
      f = 'Kit::new_service: ';
      d = constructor.deps;
      if (!d) {
        throw new Error(f + ("Service-Module '" + name + "' is missing @deps"));
      }
      needs = (ref = d.services) != null ? ref : [];
      if (d.mysql || d.mongo) {
        needs.push('db');
      }
      for (i = 0, len = needs.length; i < len; i++) {
        n = needs[i];
        if (!(n in this.services)) {
          throw new Error(f + ("Service-Module '" + name + "' requires service '" + n + "'"));
        }
      }
      _t = this;
      _a = args != null ? args : [];
      this.services[name] = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(constructor, [_t].concat(slice.call(_a)), function(){});
      if (name === 'logger') {
        _log = this.services[name].log;
      }
      return this.services[name];
    };

    Kit.prototype.add_route_service = function(name, obj) {
      return this.routes[name] = obj;
    };

    Kit.prototype.new_route_service = function(name, constructor, args) {
      var _a, _t, d, f, i, len, n, needs, ref;
      f = 'Kit::new_route_service: ';
      d = constructor.deps;
      if (!d) {
        throw new Error(f + ("Route-Module '" + name + "' is missing @deps"));
      }
      needs = (ref = d.services) != null ? ref : [];
      needs.push('wrapper');
      for (i = 0, len = needs.length; i < len; i++) {
        n = needs[i];
        if (!(n in this.services)) {
          throw new Error(f + ("Route-Module '" + name + "' requires service '" + n + "'"));
        }
      }
      _t = this;
      _a = args != null ? args : [];
      return this.routes[name] = (function(func, args, ctor) {
        ctor.prototype = func.prototype;
        var child = new ctor, result = func.apply(child, args);
        return Object(result) === result ? result : child;
      })(constructor, [_t].concat(slice.call(_a)), function(){});
    };

    return Kit;

  })();

  exports.Kit = Kit;

}).call(this);
