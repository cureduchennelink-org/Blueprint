// Generated by CoffeeScript 1.9.2
(function() {
  var E, MCore, Q, checkForHexRegExp, mongoose;

  Q = require('q');

  E = require('../../error');

  mongoose = require('mongoose');

  checkForHexRegExp = new RegExp("^[0-9a-fA-F]{24}$");

  MCore = (function() {
    function MCore(log) {
      this.log = log;
    }

    MCore.prototype.isObjectId = function(n) {
      return checkForHexRegExp.test(n);
    };

    MCore.prototype.create = function(model, vals) {
      return Q.ninvoke(model, 'create', vals);
    };

    MCore.prototype.save = function(doc) {
      return (Q.ninvoke(doc, 'save')).then(function(result) {
        return {
          doc: result[0],
          numberAffected: result[1]
        };
      });
    };

    MCore.prototype.createSubDoc = function(doc, arrayKey, sub_doc) {
      doc[arrayKey].push(sub_doc);
      return (Q.ninvoke(doc, 'save')).then(function(result) {
        return {
          doc: result[0],
          numberAffected: result[1],
          sub_doc: sub_doc
        };
      });
    };

    MCore.prototype.update = function(model, where, set, opts) {
      if (!opts) {
        opts = {};
      }
      return (Q.ninvoke(model, 'update', where, set, opts)).then(function(result) {
        return {
          numberAffected: result[0],
          raw: result[1]
        };
      });
    };

    MCore.prototype.findByIdAndUpdate = function(model, id, set, opts) {
      if (!opts) {
        opts = {};
      }
      return (Q.ninvoke(model, 'findByIdAndUpdate', id, set, opts)).then(function(new_doc) {
        return new_doc;
      });
    };

    MCore.prototype.find = function(model, opts, pjn) {
      return Q.ninvoke(model, 'find', opts, pjn);
    };

    MCore.prototype.findOne = function(model, opts, pjn) {
      return Q.ninvoke(model, 'findOne', opts, pjn);
    };

    MCore.prototype.findById = function(model, id) {
      return (Q.ninvoke(model, 'findById', id)).then(function(doc) {
        return doc;
      });
    };

    return MCore;

  })();

  exports.MCore = MCore;

}).call(this);
