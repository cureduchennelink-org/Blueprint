// Generated by CoffeeScript 1.9.2
(function() {
  var Db, Promise, _, config, http, m, mysql, ref, ref1, ref2,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  _ = require('lodash');

  http = require('http');

  mysql = require('mysql');

  config = (require('../../config'))();

  if (!((ref = config.db) != null ? (ref1 = ref.mysql) != null ? (ref2 = ref1.pool) != null ? ref2.host : void 0 : void 0 : void 0)) {
    throw new Error('MYSQL NOT ENABLED');
  }

  config.db.mysql.pool.database += '_test';

  config.log = {
    name: 'test',
    level: 'trace'
  };

  exports.config = config;

  exports.test_ident_id = 97;

  exports.rename = function(name) {
    return 'bp-' + name + '' + new Date().getTime();
  };

  exports.encryptedPassword = 'xfGuZKjVkoNgQyXxYT8+Hg==.f+uw2I+dqzfOE4O82Znikrbdb0lOONBxl/xcWGsQtFI=';

  m = 'test/lib/Util::';

  Db = (function() {
    function Db(config1) {
      this.config = config1;
      this.SqlQuery = bind(this.SqlQuery, this);
      this.conn = mysql.createConnection(this.config.pool);
    }

    Db.prototype.End = function() {
      this.conn.end;
      return this.conn = null;
    };

    Db.prototype.SqlQuery = function(sql, args) {
      var query;
      if (this.conn === null) {
        throw new E.DbError('DB:SQL:BAD_CONN');
      }
      query = Promise.promisify(this.conn.query, {
        context: this.conn
      });
      console.log(m + 'SqlQuery', {
        query: query,
        sql: sql,
        args: args
      });
      return (query(sql, args)).then(function(just_rows) {
        console.log(m + 'SqlQuery-result', {
          just_rows: just_rows
        });
        return just_rows;
      });
    };

    Db.prototype.GetOne = function(table, id) {
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = 'SELECT * FROM ' + table + ' WHERE id= ? AND di= 0';
        return this.SqlQuery(sql, [id]);
      }).then(function(db_rows) {
        return db_rows[0];
      });
    };

    Db.prototype.InsertOne = function(table, new_values) {
      return Promise.resolve().bind(this).then(function() {
        var arg, cols, nm, qs, sql, val;
        cols = ['cr'];
        qs = ['?'];
        arg = [null];
        for (nm in new_values) {
          val = new_values[nm];
          cols.push(nm);
          qs.push('?');
          arg.push(val);
        }
        sql = 'INSERT INTO ' + table + ' (' + (cols.join(',')) + ') VALUES (' + (qs.join(',')) + ')';
        return this.SqlQuery(sql, arg);
      }).then(function(db_result) {
        return this.GetOne(table, db_result.insertId);
      }).then(function(rec) {
        return rec;
      });
    };

    Db.prototype.GetByKey = function(ctx, table, key, vals) {
      var vals_type;
      if (!vals) {
        throw new Error('EMPTY_VALS');
      }
      vals_type = typeof vals;
      return Promise.resolve().bind(this).then(function() {
        var args, sql;
        args = vals_type === 'number' || vals_type === 'string' ? [[vals]] : [vals];
        sql = 'SELECT * FROM ' + table + ' WHERE di= 0 AND ' + key + ' IN (?)';
        return this.SqlQuery(sql, args);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return Db;

  })();

  exports.db = new Db(config.db.mysql);

}).call(this);
