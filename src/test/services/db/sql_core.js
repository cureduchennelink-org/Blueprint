// Generated by CoffeeScript 1.9.2

/*
Test Suite for Sql Core
 */

(function() {
  var SqlCore, Util, _log, chai, config, kit;

  chai = require('chai');

  Util = require('../../lib/Util');

  SqlCore = require('../../../lib/db/_mysql/sql_core').SqlCore;

  chai.should();

  config = Util.config;


  /*
  class SqlCore
  	constructor: (pool_opts, log)->
  	StartTransaction: (ctx)=>
  	method_factory: (sql_mod, name)=>
   */

  kit = {
    services: {
      error: {},
      logger: {
        log: {
          debug: console.log
        }
      }
    }
  };

  _log = kit.services.logger.log;

  describe('Sql Core', function() {
    var conn, core;
    core = new SqlCore(kit, config.db.mysql.pool);
    conn = false;
    it('should create a database connection pool', function() {
      core.should.have.property('pool');
      return core.pool._closed.should.be["false"];
    });
    it('should acquire a connection from the pool', function(done) {
      return core.acquire(function(err, connection) {
        if (err) {
          done(err);
        }
        conn = connection;
        conn.should.respondTo('query');
        core.pool._allConnections.length.should.equal(1);
        return conn.query('SELECT 1 + 1 AS solution', function(err, result) {
          if (err) {
            done(err);
          }
          result[0].solution.should.equal('2');
          return done();
        });
      });
    });
    it('should release a connection from the pool', function() {
      core.release(conn);
      core.pool._allConnections.length.should.equal(1);
      return core.pool._freeConnections.length.should.equal(1);
    });
    it('should destroy a connection from the pool', function() {
      return core.acquire(function(err, connection) {
        if (err) {
          done(err);
        }
        conn = connection;
        conn.should.respondTo('query');
        core.destroy(conn);
        conn = false;
        return core.pool._freeConnections.length.should.equal(0);
      });
    });
    it('should perform a query against a context', function() {
      var ctx;
      ctx = {
        conn: null,
        log: _log
      };
      return (core.Acquire()).then(function(c) {
        ctx.conn = c;
        return core.sqlQuery(ctx, 'SELECT 1 + ? AS solution', ['1']);
      }).then(function(db_rows) {
        db_rows[0].solution.should.equal(2);
        return core.release(ctx.conn);
      });
    });
    it('should start a transaction against a context', function() {
      var ctx;
      ctx = {
        conn: null,
        log: _log
      };
      return (core.Acquire()).then(function(c) {
        ctx.conn = c;
        return core.StartTransaction(ctx);
      }).then(function() {
        return core.StartTransaction(ctx);
      }).then(function() {
        return null;
      })["catch"](function(err) {
        err.should.match(/ER_CANT_CHANGE_TX_CHARACTERISTICS/);
        return core.destroy(ctx.conn);
      });
    });
    return it('should have a common method factory', function() {
      var bool, deprecated, i, len, nm, ref, results, sql_mod;
      sql_mod = {
        table: 'dummy',
        schema: {
          GetByKey: true,
          UpdateByKey: true,
          DisposeByIds: true,
          GetCollection: true,
          Create: true,
          UpdateById: true,
          DeleteById: true,
          get_by_id: true
        }
      };
      core.method_factory(sql_mod, 'MockSqlMod');
      deprecated = ['create', 'update_by_id', 'delete_by_id', 'get_collection'];
      ref = sql_mod.schema;
      for (nm in ref) {
        bool = ref[nm];
        sql_mod.should.respondTo(nm);
      }
      results = [];
      for (i = 0, len = deprecated.length; i < len; i++) {
        nm = deprecated[i];
        results.push(sql_mod.should.respondTo(nm));
      }
      return results;
    });
  });

}).call(this);
