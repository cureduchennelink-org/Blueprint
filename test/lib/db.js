// Generated by CoffeeScript 1.9.2
(function() {
  var Db, Promise, _, db, mysql,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  mysql = require('mysql');

  _ = require('lodash');

  db = false;

  exports.Instance = function(config) {
    if (db !== false) {
      return db;
    }
    console.log('Connecting to DB...', {
      config: config
    });
    db = new Db(config);
    return db;
  };

  Db = (function() {
    function Db(config1) {
      this.config = config1;
      this.PutByKey = bind(this.PutByKey, this);
      this.GetByKey = bind(this.GetByKey, this);
      this.SqlQuery = bind(this.SqlQuery, this);
      this.conn = mysql.createConnection(this.config.pool);
    }

    Db.prototype.End = function() {
      this.conn.end;
      return this.conn = null;
    };

    Db.prototype.SqlQuery = function(sql, args) {
      var p_query;
      console.log("\n----SQL----> ", sql);
      if (args) {
        console.log('----ARGS---> ', JSON.stringify(args));
      }
      if (this.conn === null) {
        throw new E.DbError('DB:SQL:BAD_CONN');
      }
      p_query = Promise.promisify(this.conn.query, {
        context: this.conn
      });
      return (p_query(sql, args)).bind(this).then(function(just_rows) {
        console.log('----RESULT-> ', 'affectedRows' in just_rows ? JSON.stringify(just_rows) : just_rows);
        return just_rows;
      });
    };

    Db.prototype.GetOne = function(table, id) {
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = 'SELECT * FROM ' + table + ' WHERE id= ? AND di= 0';
        return this.SqlQuery(sql, [id]);
      }).then(function(db_rows) {
        return db_rows[0];
      });
    };

    Db.prototype.InsertOne = function(table, new_values, reread) {
      return Promise.resolve().bind(this).then(function() {
        var arg, cols, nm, qs, sql, val;
        cols = ['cr'];
        qs = ['?'];
        arg = [null];
        for (nm in new_values) {
          val = new_values[nm];
          cols.push(nm);
          qs.push('?');
          arg.push(val);
        }
        sql = 'INSERT INTO ' + table + ' (' + (cols.join(',')) + ') VALUES (' + (qs.join(',')) + ')';
        return this.SqlQuery(sql, arg);
      }).then(function(db_result) {
        if (reread === false) {
          return db_result;
        }
        return this.GetOne(table, db_result.insertId);
      }).then(function(rec) {
        return rec;
      });
    };

    Db.prototype.DeleteByKey = function(table, key, values) {
      return Promise.resolve().bind(this).then(function() {
        var args, sql;
        sql = 'DELETE FROM ' + table + ' where ' + key + ' IN (?)';
        args = [values];
        return this.SqlQuery(sql, args);
      }).then(function(db_result) {
        return db_result;
      });
    };

    Db.prototype.GetByKey = function(table, key, vals) {
      var vals_type;
      if (!vals) {
        throw new Error('EMPTY_VALS');
      }
      vals_type = typeof vals;
      return Promise.resolve().bind(this).then(function() {
        var args, sql;
        args = vals_type === 'number' || vals_type === 'string' ? [[vals]] : [vals];
        sql = 'SELECT * FROM ' + table + ' WHERE di= 0 AND ' + key + ' IN (?)';
        return this.SqlQuery(sql, args);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    Db.prototype.PutByKey = function(table, key, key_val, vals) {
      if (typeof vals !== 'object') {
        throw new Error('OBJECT_VALS');
      }
      return Promise.resolve().bind(this).then(function() {
        var args, nm, sql, vals_stuff;
        vals_stuff = [];
        args = [];
        for (nm in vals) {
          vals_stuff.push(" " + nm + " = ?");
          args.push(vals[nm]);
        }
        args.push(key_val);
        sql = 'UPDATE ' + table + ' SET ' + (vals_stuff.join(',')) + ' WHERE di= 0 AND ' + key + ' = ?';
        return this.SqlQuery(sql, args);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return Db;

  })();

}).call(this);
