// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, _, _log, chai, server, uuid;

  Promise = require('bluebird');

  _ = require('lodash');

  server = require('../..');

  uuid = require('uuid');

  chai = require('chai');

  chai.should();

  _log = console.log;

  describe('AgentHeader:service:', function() {
    var agent_string_1, agent_string_2, agent_string_3, agent_string_4, already_added_id, base_ctx, db_stuff, f, kit, module, next_expected_id, sdb, uid;
    f = 'AgentHeader:service';
    uid = ' - ' + uuid.v4();
    agent_string_1 = 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.157 Safari/537.36' + uid;
    agent_string_2 = 'Mozilla/5.0 (Linux; Android 4.1; Nexus 7 Build/JRN84D) AppleWebKit/535.19 (KHTML, like Gecko) Chrome/18.0.1025.166 Safari/535.19' + uid;
    agent_string_3 = 'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2272.118 Safari/537.36' + uid + ' #PRE-ENTERED';
    agent_string_4 = 'curl/7.19.7 (i386-redhat-linux-gnu)' + uid;
    next_expected_id = 0;
    already_added_id = 0;
    module = false;
    base_ctx = {
      log: {
        debug: console.log
      }
    };
    db_stuff = [];
    kit = false;
    sdb = false;
    after(function() {
      var ref;
      return (ref = kit.services.server) != null ? ref.server.close() : void 0;
    });
    before(function() {
      return Promise.resolve().then(function() {
        var config_extra, mysql_mods;
        config_extra = {
          db: {
            mysql: {
              pool: {
                level2_debug: true
              },
              modules: {
                agent_header: {
                  file: 'lib/db/_mysql/sql_agent_header'
                }
              }
            }
          },
          service_modules: {
            db: {
              file: 'lib/db'
            },
            AgentHeader: {
              file: 'lib/agent_header'
            }
          }
        };
        mysql_mods = [];
        mysql_mods.push('agent_header');
        return server.start(false, ['AgentHeader'], [], true, mysql_mods, false, config_extra);
      }).then(function(the_kit) {
        kit = the_kit;
        module = kit.services.AgentHeader;
        sdb = kit.services.db.mysql;
        return sdb.core.Acquire();
      }).then(function(c) {
        base_ctx.conn = c;
        return sdb.core.sqlQuery(base_ctx, 'INSERT INTO agent_header (agent_header, agent_header_md5) VALUES (?, MD5(?))', [agent_string_3, agent_string_3]);
      }).then(function(db_results) {
        already_added_id = db_results.insertId;
        return sdb.core.sqlQuery(base_ctx, 'SELECT id FROM agent_header ORDER BY id desc LIMIT 1');
      }).then(function(db_rows) {
        return next_expected_id = db_rows.length ? db_rows[0].id + 1 : 1;
      });
    });
    it('adds', function() {
      var s;
      s = false;
      return Promise.resolve().then(function() {
        return module.xlate(s = agent_string_1 + (" #" + next_expected_id));
      }).then(function(id) {
        ({
          agent_string_1: s,
          id: id
        }).should.deep.equal({
          agent_string_1: s,
          id: next_expected_id
        });
        return ++next_expected_id;
      });
    });
    it('adds+find_cache', function() {
      var s;
      s = false;
      return Promise.resolve().then(function() {
        return module.xlate(s = agent_string_2 + (" #" + next_expected_id));
      }).then(function(id) {
        ({
          agent_string_2: s,
          id: id
        }).should.deep.equal({
          agent_string_2: s,
          id: next_expected_id
        });
        return module.xlate(s);
      }).then(function(id) {
        ({
          agent_string_2: s,
          id: id
        }).should.deep.equal({
          agent_string_2: s,
          id: next_expected_id
        });
        return ++next_expected_id;
      });
    });
    it('find-db', function() {
      return Promise.resolve().then(function() {
        return module.xlate(agent_string_3);
      }).then(function(id) {
        ({
          agent_string_3: agent_string_3,
          id: id
        }).should.deep.equal({
          agent_string_3: agent_string_3,
          id: already_added_id
        });
        return ++next_expected_id;
      });
    });
    return it('handles simultaineous updates', function() {
      var expected;
      expected = [];
      return Promise.resolve().then(function() {
        var i, j, p, s;
        p = [];
        for (i = j = 1; j <= 20; i = ++j) {
          p.push(s = module.xlate(agent_string_4 + ' #' + next_expected_id));
          expected.push(next_expected_id);
          p.push(s);
          expected.push(next_expected_id);
          ++next_expected_id;
        }
        return Promise.all(p);
      }).then(function(id_array) {
        return id_array.should.deep.equal(expected);
      });
    });
  });

}).call(this);
