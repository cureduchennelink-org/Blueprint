// Generated by CoffeeScript 1.9.2
(function() {
  var HealthCheck, ObjectId, Promise,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  ObjectId = require('mongodb').ObjectId;

  HealthCheck = (function() {
    HealthCheck.deps = {
      services: ['logger', 'error', 'ses', 'lamd']
    };

    function HealthCheck(kit) {
      this._GetStatus = bind(this._GetStatus, this);
      this._GetHealth = bind(this._GetHealth, this);
      this._GetPing = bind(this._GetPing, this);
      this._GetPingAuth = bind(this._GetPingAuth, this);
      this._GetDebug = bind(this._GetDebug, this);
      this.E = kit.services.error;
      this.log = kit.services.logger.log;
      this.lamd = kit.services.lamd;
      this.ses = kit.services.ses;
      this.ses_email_config = kit.services.config.ses.emails;
      this.config = kit.services.config;
      this.endpoints = {
        getHealth: {
          verb: 'get',
          route: '/Health',
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._GetHealth
          },
          sql_conn: true,
          auth_required: false,
          mongo_pool: "health"
        },
        pingAuth: {
          verb: 'get',
          route: '/PingAuth',
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._GetPingAuth
          },
          sql_conn: false,
          auth_required: true
        },
        ping: {
          verb: 'get',
          route: '/Ping',
          use: true,
          wrap: 'simple_wrap',
          version: {
            any: this._GetPing
          },
          sql_conn: false,
          auth_required: false
        },
        getStatus: {
          verb: 'get',
          route: '/Status',
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._GetStatus
          },
          sql_conn: true,
          auth_required: false
        },
        getDebug: {
          verb: 'get',
          route: '/Debug',
          lamd: false,
          use: true,
          wrap: 'default_wrap',
          version: {
            any: this._GetDebug
          },
          sql_conn: false,
          auth_required: false,
          mongo_pool: "health"
        }
      };
    }

    HealthCheck.prototype._GetDebug = function(ctx, pre_loaded) {
      var f, len, p, ref, send, use_doc;
      use_doc = {
        params: {
          device: '{String}-FUTURE',
          req_uuid: '{String}'
        },
        response: {
          success: '{Bool}',
          debug: '{Array}'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      f = 'R_Debug:_Get:';
      p = ctx.p;
      send = {
        success: true,
        debug: []
      };
      len = (ref = p.req_uuid) != null ? ref.length : void 0;
      if (len !== 'a27af922-b891-45e7-b422-b50192db1928'.length) {
        throw new this.E.InvalidArg('req_uuid:' + len);
      }
      return Promise.resolve().bind(this).then(function() {
        var hint, method, options, projection, query, sort;
        method = 'find';
        query = {
          "_id": p.req_uuid
        };
        projection = {};
        options = {};
        hint = {};
        sort = {};
        return this.lamd.read_deep(ctx, method, query, projection, options, hint, sort);
      }).then(function(db_results) {
        send.debug = db_results;
        return {
          send: send
        };
      });
    };

    HealthCheck.prototype._GetPingAuth = function(ctx, pre_loaded) {
      var use_doc;
      use_doc = {
        params: {
          dummy: '{String}'
        },
        response: {
          success: '{Bool}'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      return {
        send: {
          success: true
        }
      };
    };

    HealthCheck.prototype._GetPing = function(req, res, next) {
      var use_doc;
      use_doc = {
        params: {
          dummy: '{String}'
        },
        response: {
          success: '{Bool}'
        }
      };
      if (req === 'use') {
        return use_doc;
      }
      res.send({
        success: true
      });
      return next();
    };

    HealthCheck.prototype._GetHealth = function(ctx, pre_loaded) {
      var f, hint, lamd_results, method, nm, options, p, projection, query, ref, ref1, ref2, ref3, ref4, sort, subject, success, type_map, use_doc;
      use_doc = {
        params: {
          type: '{String}'
        },
        response: {
          success: '{Bool}'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      f = 'R_Health:_Get:';
      p = ctx.p;
      success = false;
      lamd_results = [];
      method = "find";
      query = {};
      projection = {};
      options = {};
      hint = {};
      sort = {};
      type_map = {
        lastbad100: {
          subject: 'Last Bad Queries',
          query: {
            "statusCode": {
              $ne: 200
            }
          },
          projection: {
            "_id": 0,
            "statusCode": 1,
            "start": 1,
            "route": 1,
            "verb": 1,
            "err": 1
          },
          sort: {
            $natural: -1
          }
        },
        last100: {
          subject: 'Last Query',
          query: {},
          projection: {
            "_id": 0,
            "statusCode": 1,
            "start": 1,
            "route": 1,
            "verb": 1,
            "err": 1
          },
          sort: {
            $natural: -1
          }
        },
        deadlocks: {
          subject: 'API Deadlocks',
          query: {
            "_id": {
              "$gt": new ObjectId(Math.floor(new Date(new Date() - 1000 * 60 * 60).getTime() / 1000).toString(16) + "0000000000000000")
            },
            "err.code": "ER_LOCK_DEADLOCK"
          },
          projection: {
            "_id": 0,
            "statusCode": 1,
            "start": 1,
            "route": 1,
            "verb": 1,
            "err": 1
          },
          hint: {
            "err.code": 1
          }
        },
        daily: {
          subject: 'Daily Aggregations API',
          query: [
            {
              $match: {
                "_id": {
                  $gt: new ObjectId(Math.floor(new Date(new Date() - 1000 * 60 * 60 * 24).getTime() / 1000).toString(16) + "0000000000000000")
                },
                "statusCode": {
                  "$ne": 406
                }
              }
            }, {
              "$group": {
                "_id": {
                  "statusCode": "$statusCode",
                  "route": "$route",
                  "err": "$err.proxy_error",
                  "err_code": "$err"
                },
                "count": {
                  "$sum": 1
                }
              }
            }, {
              $sort: {
                "count": -1
              }
            }
          ],
          method: "aggregate"
        }
      };
      if (!(p.type in type_map)) {
        throw new this.E.MissingArg("Bad Health Type (options: " + ((function() {
          var results;
          results = [];
          for (nm in type_map) {
            results.push(nm);
          }
          return results;
        })()) + ") - using: " + p.type);
      }
      subject = type_map[p.type].subject;
      method = (ref = type_map[p.type].method) != null ? ref : method;
      query = type_map[p.type].query;
      projection = (ref1 = type_map[p.type].projection) != null ? ref1 : projection;
      options = (ref2 = type_map[p.type].options) != null ? ref2 : options;
      hint = (ref3 = type_map[p.type].hint) != null ? ref3 : hint;
      sort = (ref4 = type_map[p.type].sort) != null ? ref4 : sort;
      return Promise.resolve().bind(this).then(function() {
        return this.lamd.read(ctx, method, query, projection, options, hint, sort);
      }).then(function(db_results) {
        var email_results, epicmvc_tables, recipient;
        lamd_results = db_results;
        email_results = ["deadlocks", "deadlocks_backend", "daily", "daily_backend"];
        if (!(lamd_results.length > 0 && email_results.indexOf(p.type) > -1)) {
          return false;
        }
        recipient = {
          reason: subject,
          type: p.type,
          eml: this.ses_email_config.alert.To
        };
        epicmvc_tables = {
          Details: [
            {
              msg: JSON.stringify(lamd_results, null, 2)
            }
          ],
          Recipient: [recipient]
        };
        return this.ses.send('alert', epicmvc_tables);
      }).then(function() {
        success = true;
        return {
          send: {
            success: success,
            num_results: lamd_results.length,
            results: lamd_results
          }
        };
      });
    };

    HealthCheck.prototype._GetStatus = function(ctx, pre_loaded) {
      var f, p, success, use_doc;
      use_doc = {
        params: {
          dummy: '{String}'
        },
        response: {
          success: '{Bool}'
        }
      };
      if (ctx === 'use') {
        return use_doc;
      }
      f = 'R_Health:_GetStatus:';
      p = ctx.p;
      success = false;
      success = true;
      return {
        send: {
          success: success,
          request_count: ctx.lamd.request_count,
          request_count_high: ctx.lamd.request_count_high,
          config: {
            api: this.config.api
          }
        }
      };
    };

    return HealthCheck;

  })();

  exports.HealthCheck = HealthCheck;

}).call(this);
