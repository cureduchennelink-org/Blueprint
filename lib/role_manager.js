// Generated by CoffeeScript 1.9.2
(function() {
  var RoleManager,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RoleManager = (function() {
    RoleManager.deps = {
      services: ['error', ''],
      config: 'roles[role_def,permit_def,sift_def],route_prefix_length.api'
    };

    function RoleManager(kit) {
      this.config = kit.services.config;
      this.E = kit.services.error;
      this.role_def = this.config.roles.role_def;
      this.permit_def = this.config.roles.permit_def;
      this.sift_def = this.config.roles.sift_def;
      this.lFunc = this.config.route_prefix_length.api;
    }

    RoleManager.prototype.SetCtx = function(ctx, roleTk, resource_overide) {
      var f, permit_nm;
      f = 'RoleManager:SetCtx:';
      ctx.log.debug(f, roleTk, resource_overide);
      ctx.role_def = this.role_def[roleTk];
      ctx.resource = resource_overide != null ? resource_overide : (((ctx.req.url.split('?'))[0].slice(this.lFunc(ctx.p.Version))).split('/'))[1];
      if (!ctx.role_def[ctx.resource]) {
        throw new this.E.ServerError('ROLEMGR:RESOURCE_NOT_IN_ROLEDEF', ctx.resource);
      }
      permit_nm = ctx.role_def[ctx.resource].permit;
      return ctx.permit = permit_nm === false ? false : this.permit_def[ctx.resource][permit_nm];
    };

    RoleManager.prototype.CheckSift = function(ctx, resource) {
      var f, ref;
      f = 'RoleManager:CheckSift:';
      if (!ctx.role_def[resource]) {
        throw new this.E.AccessDenied('ROLE:SIFT:RESOURCE_NOT_IN_ROLEDEF', resource);
      }
      if (!this.sift_def[resource]) {
        throw new this.E.AccessDenied('ROLE:SIFT:RESOURCE_NOT_IN_SIFTDEF', resource);
      }
      if (ref = ctx.role_def[resource].SIFT, indexOf.call(this.sift_def[resource], ref) < 0) {
        throw new this.E.AccessDenied('ROLE:SIFT:SIFT_LIST');
      }
      return ctx.role_def[resource].SIFT;
    };

    RoleManager.prototype.CheckTalent = function(ctx, roleTk, wanted_talent) {
      var f, ref, ref1;
      f = 'RoleManager:CheckTalent:';
      ctx.log.debug(f, {
        roleTk: roleTk,
        wanted_talent: wanted_talent
      });
      if (indexOf.call((ref = (ref1 = this.role_def[roleTk]) != null ? ref1.talent : void 0) != null ? ref : [], wanted_talent) < 0) {
        throw new this.E.AccessDenied(f + 'TALENT_LIST');
      }
    };

    RoleManager.prototype.GetTalentedRoles = function(ctx, talent) {
      var def, f, ref, ref1, role, talented_roles;
      f = 'RoleManager:GetTalentedRoles:';
      ctx.log.debug(f, talent);
      talented_roles = [];
      ref = this.role_def;
      for (role in ref) {
        def = ref[role];
        if (indexOf.call((ref1 = def.talent) != null ? ref1 : [], talent) >= 0) {
          talented_roles.push(role);
        }
      }
      return talented_roles;
    };

    return RoleManager;

  })();

  exports.RoleManager = RoleManager;

}).call(this);
