// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, TripManager;

  Promise = require('bluebird');

  TripManager = (function() {
    TripManager.deps = {
      mysql: ['trip'],
      services: ['tokenMgr']
    };

    function TripManager(kit) {
      this.E = kit.services.error;
      this.sdb = kit.services.db.mysql;
      this.tokenMgr = kit.services.tokenMgr;
    }

    TripManager.prototype.getTripFromToken = function(ctx, token) {
      var f, trip;
      f = 'TripManager:getTripFromToken';
      trip = false;
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.trip.get_by_token(ctx, token);
      }).then(function(db_rows) {
        if (db_rows.length !== 1) {
          return {
            status: 'unknown'
          };
        }
        trip = db_rows[0];
        if (trip["void"]) {
          trip.status = 'void';
        } else if (trip.expires !== null && trip.expires < new Date()) {
          trip.status = 'expired';
        } else if (trip.returned !== null) {
          trip.status = 'returned';
        } else {
          trip.status = 'valid';
        }
        return trip;
      });
    };

    TripManager.prototype.planTrip = function(ctx, auth_ident_id, json_obj, expires, domain) {
      var f, json, token, trip;
      f = 'TripManager:planTrip';
      token = false;
      trip = false;
      json = JSON.stringify(json_obj);
      return Promise.resolve().bind(this).then(function() {
        return this.tokenMgr.CreateToken(10);
      }).then(function(new_token) {
        ctx.log.debug(f, 'got new token:', new_token);
        token = new_token;
        return this.sdb.trip.create(ctx, {
          auth_ident_id: auth_ident_id,
          json: json,
          expires: expires,
          domain: domain,
          token: token
        });
      }).then(function(db_result) {
        ctx.log.debug(f, 'got new trip result:', db_result);
        if (db_result.affectedRows !== 1) {
          throw new this.E.DbError('TRIPMANAGER:NEW_TRIP:CREATE');
        }
        return this.sdb.trip.get_by_id(ctx, db_result.insertId);
      }).then(function(db_rows) {
        if (db_rows.length !== 1) {
          throw new this.E.NotFoundError('TRIPMANAGER:NEW_TRIP:REREAD');
        }
        trip = db_rows[0];
        return trip;
      });
    };

    TripManager.prototype.returnFromTrip = function(ctx, trip_id, ident_id) {
      var f, new_values;
      f = 'TripManager:returnFromTrip';
      new_values = {
        returned: new Date()
      };
      return Promise.resolve().bind(this).then(function() {
        if (typeof ident_id === 'number') {
          new_values.ident_id = ident_id;
        }
        return this.sdb.trip.update_by_id(ctx, trip_id, new_values);
      }).then(function(db_result) {
        ctx.log.debug(f, 'got returned trip result:', db_result);
        if (db_result.affectedRows !== 1) {
          throw new this.E.DbError('TRIPMANAGER:RETURN:UPDATE');
        }
      });
    };

    TripManager.prototype.voidTrip = function(ctx, trip_id) {
      var f;
      f = 'TripManager:voidTrip';
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.trip.update_by_id(ctx, trip_id, {
          "void": 1
        });
      }).then(function(db_result) {
        ctx.log.debug(f, 'got void trip result:', db_result);
        if (db_result.affectedRows !== 1) {
          throw new this.E.DbError('TRIPMANAGER:VOID:UPDATE');
        }
      });
    };

    return TripManager;

  })();

  exports.TripManager = TripManager;

}).call(this);
