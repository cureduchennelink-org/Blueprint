// Generated by CoffeeScript 1.9.2
(function() {
  var E, Q, TripManager;

  Q = require('q');

  E = require('./error');

  TripManager = (function() {
    function TripManager(kit) {
      this.log = kit.services.logger.log;
      this.sdb = kit.services.db.mysql;
      this.tokenMgr = kit.services.tokenMgr;
    }

    TripManager.prototype.getTripFromToken = function(ctx, token, for_update) {
      var f, trip;
      if (for_update == null) {
        for_update = false;
      }
      f = 'TripManager:getTripFromToken';
      trip = false;
      return Q.resolve().then((function(_this) {
        return function() {
          return _this.sdb.trip.get_by_token(ctx, token, for_update);
        };
      })(this)).then(function(db_rows) {
        if (db_rows.length !== 1) {
          return {
            status: 'unknown'
          };
        }
        trip = db_rows[0];
        if (trip["void"]) {
          trip.status = 'void';
        } else if (trip.expires !== null && trip.expires < new Date()) {
          trip.status = 'expired';
        } else if (trip.returned !== null) {
          trip.status = 'returned';
        } else {
          trip.status = 'valid';
        }
        return trip;
      });
    };

    TripManager.prototype.planTrip = function(ctx, auth_ident_id, json_obj, expires, domain) {
      var _log, f, json, token, trip;
      f = 'TripManager:planTrip';
      _log = ctx.log;
      token = false;
      trip = false;
      json = JSON.stringify(json_obj);
      return Q.resolve().then((function(_this) {
        return function() {
          return _this.tokenMgr.CreateToken(10);
        };
      })(this)).then((function(_this) {
        return function(new_token) {
          _log.debug(f, 'got new token:', new_token);
          token = new_token;
          return _this.sdb.trip.create(ctx, {
            auth_ident_id: auth_ident_id,
            json: json,
            expires: expires,
            domain: domain,
            token: token
          });
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          _log.debug(f, 'got new trip result:', db_result);
          if (db_result.affectedRows !== 1) {
            throw new E.DbError('TRIPMANAGER:NEW_TRIP:CREATE');
          }
          return _this.sdb.trip.get_by_id(ctx, db_result.insertId);
        };
      })(this)).then((function(_this) {
        return function(db_rows) {
          if (db_rows.length !== 1) {
            throw new E.NotFoundError('TRIPMANAGER:NEW_TRIP:REREAD');
          }
          trip = db_rows[0];
          return trip;
        };
      })(this));
    };

    TripManager.prototype.returnFromTrip = function(ctx, trip_id, ident_id) {
      var _log, f, new_values;
      f = 'TripManager:returnFromTrip';
      _log = ctx.log;
      new_values = {
        returned: new Date()
      };
      return Q.resolve().then((function(_this) {
        return function() {
          if (typeof ident_id === 'number') {
            new_values.ident_id = ident_id;
          }
          return _this.sdb.trip.update_by_id(ctx, trip_id, new_values);
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          _log.debug(f, 'got returned trip result:', db_result);
          if (db_result.affectedRows !== 1) {
            throw new E.DbError('TRIPMANAGER:RETURN:UPDATE');
          }
        };
      })(this));
    };

    TripManager.prototype.voidTrip = function(ctx, trip_id) {
      var _log, f;
      f = 'TripManager:voidTrip';
      _log = ctx.log;
      return Q.resolve().then((function(_this) {
        return function() {
          return _this.sdb.trip.update_by_id(ctx, trip_id, {
            "void": 1
          });
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          _log.debug(f, 'got void trip result:', db_result);
          if (db_result.affectedRows !== 1) {
            throw new E.DbError('TRIPMANAGER:VOID:UPDATE');
          }
        };
      })(this));
    };

    return TripManager;

  })();

  exports.TripManager = TripManager;

}).call(this);
