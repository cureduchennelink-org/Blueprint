// Generated by CoffeeScript 1.9.2
(function() {
  var ELBRedirect,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ELBRedirect = (function() {
    ELBRedirect.deps = {
      services: ['logger', 'server', 'config']
    };

    function ELBRedirect(kit) {
      this.server_start = bind(this.server_start, this);
      var f;
      f = 'ELBRedirect:constructor';
      this.log = kit.services.logger.log;
      this.config = kit.services.config;
      this.host = this.config.api.host;
      this.port = this.config.api.port;
    }

    ELBRedirect.prototype.server_start = function(kit) {
      var f, server;
      f = 'ELBRedirect:server_start:';
      server = kit.services.server.server;
      server.use((function(_this) {
        return function(req, res, next) {
          var path;
          if (req.method === 'GET' && (req.headers['x-forwarded-proto'] === 'http')) {
            path = 'https://' + _this.host + req.href();
            _this.log.debug(f, {
              method: req.method,
              header: req.headers['x-forwarded-proto'],
              path: path
            });
            res.setHeader('location', path);
            return res.send(302);
          } else if (req.method === 'GET' && (req.headers['x-forwarded-proto'] === 'https' && req.headers.host !== _this.host)) {
            path = 'https://' + _this.host + req.href();
            _this.log.debug(f, {
              method: req.method,
              header: req.headers['x-forwarded-proto'],
              path: path
            });
            res.setHeader('location', path);
            return res.send(302);
          } else {
            return next();
          }
        };
      })(this));
      return server.get('/linkedinreturn', (function(_this) {
        return function(req, res, next) {
          var new_url, path, protocol;
          new_url = '/#!/linkedinreturn' + req.url.toString().substr(15);
          protocol = _this.host === 'localhost' ? 'http' : 'https';
          path = protocol + '://' + req.header('host') + new_url;
          _this.log.debug(f, {
            new_url: new_url,
            path: path
          });
          res.writeHead(301, {
            Location: path
          });
          return res.end();
        };
      })(this));
    };

    return ELBRedirect;

  })();

  exports.ELBRedirect = ELBRedirect;

}).call(this);
