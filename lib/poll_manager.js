// Generated by CoffeeScript 1.9.2
(function() {
  var CircularBuffer, PollManager, _, _log, _log2,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('lodash');

  CircularBuffer = require('./circular_buffer').CircularBuffer;

  _log = false;

  _log2 = {
    debug: function() {}
  };

  PollManager = (function() {
    PollManager.deps = {
      services: ['logger', 'push'],
      config: 'push_service.max_buffer_size'
    };

    function PollManager(kit) {
      this.C_ChangesRemovedFromBuffer = bind(this.C_ChangesRemovedFromBuffer, this);
      this.C_ChangesAddedToBuffer = bind(this.C_ChangesAddedToBuffer, this);
      this.C_PushChangesReceived = bind(this.C_PushChangesReceived, this);
      _log = kit.services.logger.log;
      this.config = kit.services.config.push_service;
      this.push = kit.services.push;
      this.buffer = new CircularBuffer(this.C_ChangesAddedToBuffer, this.C_ChangesRemovedFromBuffer, this.config.max_buffer_size);
      this.pollers = {};
      this.registry = {};
      this.pollers_msgs = {};
      this.data_set_idx = {};
    }

    PollManager.prototype.server_init = function(kit) {
      var f;
      f = 'PollManager:server_init:';
      return this.push.RegisterForChanges(this.C_PushChangesReceived);
    };

    PollManager.prototype.PollerTimedOut = function(id) {
      return this.S_Finish(id);
    };

    PollManager.prototype.PollerClosed = function(id) {
      return this.S_CleanupPoller(id);
    };

    PollManager.prototype.AddPoller = function(id, req, res, listen, state, timeoutMillis) {
      var base, count, f, handle, item, nm, partial_handle, pset, ref;
      f = 'PollManager:AddPoller:';
      this.pollers[id] = {
        req: req,
        res: res,
        state: state,
        listen: listen,
        handles: [],
        handle_map: {}
      };
      this.pollers[id].timeout = setTimeout(((function(_this) {
        return function() {
          return _this.PollerTimedOut(id);
        };
      })(this)), timeoutMillis);
      for (nm in listen) {
        handle = listen[nm];
        ref = handle.split('/'), pset = ref[0], item = ref[1], count = ref[2];
        partial_handle = pset + '/' + item;
        if ((base = this.registry)[partial_handle] == null) {
          base[partial_handle] = [];
        }
        this.registry[partial_handle].push(id);
        this.pollers[id].handles.push(partial_handle);
        this.pollers[id].handle_map[partial_handle] = nm;
      }
      _log2.debug(f, 'handle_map:', this.pollers[id].handle_map);
      return this.S_ValidateHandles(id, listen);
    };

    PollManager.prototype.S_ValidateHandles = function(id, listen) {
      var change, count, f, handle, i, item, len, missing_changes, nm, ph, pset, ref, ref1;
      f = 'PollManager:S_ValidateHandles:';
      missing_changes = [];
      for (nm in listen) {
        handle = listen[nm];
        ref = handle.split('/'), pset = ref[0], item = ref[1], count = ref[2];
        ph = pset + '/' + item;
        ref1 = this.S_GetMissingChanges(ph, count);
        for (i = 0, len = ref1.length; i < len; i++) {
          change = ref1[i];
          missing_changes.push(change);
        }
      }
      missing_changes.sort(function(a, b) {
        return a.count - b.count;
      });
      if (missing_changes.length) {
        return this.S_FastForwardWithChanges(id, this.S_FormatChanges(this.S_SortChanges(missing_changes)));
      }
    };

    PollManager.prototype.S_IndexChanges = function(raw_changes, idx_list) {
      var base, change, f, i, idx, len, ph, results;
      f = 'PollManager:S_IndexChanges:';
      results = [];
      for (idx = i = 0, len = raw_changes.length; i < len; idx = ++i) {
        change = raw_changes[idx];
        ph = change.pset_id + '/' + change.pset_item_id;
        if ((base = this.data_set_idx)[ph] == null) {
          base[ph] = [];
        }
        results.push(this.data_set_idx[ph].push(idx_list[idx]));
      }
      return results;
    };

    PollManager.prototype.S_UnIndexChanges = function(raw_changes) {
      var change, f, i, len, ph;
      f = 'PollManager:S_UnIndexChanges:';
      for (i = 0, len = raw_changes.length; i < len; i++) {
        change = raw_changes[i];
        ph = change.pset_id + '/' + change.pset_item_id;
        if (!this.data_set_idx[ph]) {
          return;
        }
        this.data_set_idx[ph].shift();
      }
    };

    PollManager.prototype.S_GetMissingChanges = function(partial_handle, current_count) {
      var change, changes, f, i, idx, idx_list, len, newest_change;
      f = 'PollManager:S_GetMissingChanges:';
      changes = [];
      idx_list = this.data_set_idx[partial_handle];
      if (!(idx_list != null ? idx_list.length : void 0)) {
        return [];
      }
      newest_change = this.buffer.getDataAtIndex(idx_list[idx_list.length - 1]);
      if (newest_change.verb === 'init' || newest_change.count === (Number(current_count))) {
        return [];
      }
      for (i = 0, len = idx_list.length; i < len; i++) {
        idx = idx_list[i];
        change = this.buffer.getDataAtIndex(idx);
        if (change.count > current_count) {
          changes.push(change);
        }
      }
      return changes;
    };

    PollManager.prototype.S_SortChanges = function(raw_changes) {
      var f, i, len, partial_handle, rec, sorted_changes;
      f = 'PollManager:S_SortChanges:';
      sorted_changes = {};
      for (i = 0, len = raw_changes.length; i < len; i++) {
        rec = raw_changes[i];
        if (rec.verb === 'init') {
          continue;
        }
        partial_handle = rec.pset_id + "/" + rec.pset_item_id;
        if (sorted_changes[partial_handle] == null) {
          sorted_changes[partial_handle] = [];
        }
        sorted_changes[partial_handle].push(_.pick(rec, ['id', 'count', 'verb', 'prev', 'after', 'resource']));
      }
      return sorted_changes;
    };

    PollManager.prototype.S_FormatChanges = function(sorted_changes) {
      var base, change, change_list, data, f, formatted_changes, i, len, name, ph;
      f = 'PollManager:S_FormatChanges:';
      data = {};
      formatted_changes = [];
      for (ph in sorted_changes) {
        change_list = sorted_changes[ph];
        data[ph] = {
          sync: {},
          partial_handle: ph
        };
        for (i = 0, len = change_list.length; i < len; i++) {
          change = change_list[i];
          if (!(data[ph].count > change.count)) {
            data[ph].count = change.count;
          }
          if ((base = data[ph].sync)[name = change.resource] == null) {
            base[name] = [];
          }
          data[ph].sync[change.resource].push(change);
        }
        formatted_changes.push(data[ph]);
      }
      return formatted_changes;
    };

    PollManager.prototype.S_RespondWithChanges = function(formatted_changes) {
      var base, change, f, h, i, id, j, k, len, len1, len2, nm, ref, ref1, req_needs_response, results;
      f = 'PollManager:S_RespondWithChanges:';
      req_needs_response = [];
      for (i = 0, len = formatted_changes.length; i < len; i++) {
        change = formatted_changes[i];
        _log2.debug(f, "got count:" + change.count + " handle: " + change.partial_handle);
        h = change.partial_handle;
        ref1 = (ref = this.registry[h]) != null ? ref : [];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          id = ref1[j];
          if (indexOf.call(req_needs_response, id) < 0) {
            req_needs_response.push(id);
          }
          nm = this.pollers[id].handle_map[h];
          if ((base = this.pollers_msgs)[id] == null) {
            base[id] = {};
          }
          this.pollers_msgs[id][nm] = change.sync;
          this.pollers[id].listen[nm] = h + '/' + change.count;
        }
        this.registry[h] = [];
      }
      results = [];
      for (k = 0, len2 = req_needs_response.length; k < len2; k++) {
        id = req_needs_response[k];
        results.push(this.S_Finish(id));
      }
      return results;
    };

    PollManager.prototype.S_FastForwardWithChanges = function(id, formatted_changes) {
      var base, change, f, h, i, len, nm;
      f = 'PollManager:S_FastForwardWithChanges:';
      for (i = 0, len = formatted_changes.length; i < len; i++) {
        change = formatted_changes[i];
        _log2.debug(f, "got count:" + change.count + " handle: " + change.partial_handle);
        h = change.partial_handle;
        nm = this.pollers[id].handle_map[h];
        if ((base = this.pollers_msgs)[id] == null) {
          base[id] = {};
        }
        this.pollers_msgs[id][nm] = change.sync;
        this.pollers[id].listen[nm] = h + '/' + change.count;
      }
      return this.S_Finish(id);
    };

    PollManager.prototype.S_Finish = function(id) {
      var f, listen, new_state, ref, req, res, state, timeout;
      f = 'PollManager:S_Finish:';
      _log2.debug(f, id);
      if (!(id in this.pollers)) {
        return;
      }
      ref = this.pollers[id], req = ref.req, res = ref.res, state = ref.state, listen = ref.listen, timeout = ref.timeout;
      clearTimeout(timeout);
      req.connection.resume();
      new_state = state;
      if (id in this.pollers_msgs) {
        _log2.debug(f, 'res end w/msgs', new_state, this.pollers_msgs[id]);
        res.send({
          state: new_state,
          listen: listen,
          sync: this.pollers_msgs[id]
        });
      } else {
        _log2.debug(f, 'res end w/o msgs', new_state);
        res.send({
          state: new_state,
          listen: listen,
          sync: {}
        });
      }
      return this.S_CleanupPoller(id);
    };

    PollManager.prototype.S_CleanupPoller = function(id) {
      var f, handle, i, ix, len, ref;
      f = 'PollManager:S_CleanupPoller:';
      _log2.debug(f, id);
      if (!(id in this.pollers)) {
        return;
      }
      ref = this.pollers[id].handles;
      for (i = 0, len = ref.length; i < len; i++) {
        handle = ref[i];
        if (!this.registry[handle]) {
          continue;
        }
        _log2.debug(f, "remove id:" + id + " from registry:" + handle, this.registry[handle]);
        ix = this.registry[handle].indexOf(id);
        if (ix > -1) {
          this.registry[handle].splice(ix, 1);
        }
        if (this.registry[handle].length === 0) {
          delete this.registry[handle];
        }
      }
      delete this.pollers[id];
      return delete this.pollers_msgs[id];
    };

    PollManager.prototype.C_PushChangesReceived = function(raw_changes) {
      var f, i, len, rec;
      f = 'PollManager:C_PushChangesReceived:';
      _log.debug(f, raw_changes.length);
      for (i = 0, len = raw_changes.length; i < len; i++) {
        rec = raw_changes[i];
        rec.after = JSON.parse(rec.after);
        rec.prev = JSON.parse(rec.prev);
      }
      return this.buffer.push(raw_changes, function(err) {
        if (err) {
          return _log.error(f, err, err.stack);
        }
      });
    };

    PollManager.prototype.C_ChangesAddedToBuffer = function(raw_changes, idx_list, cb) {
      var f;
      f = 'PollManager:C_ChangesAddedToBuffer:';
      this.S_IndexChanges(raw_changes, idx_list);
      this.S_RespondWithChanges(this.S_FormatChanges(this.S_SortChanges(raw_changes)));
      return cb(null);
    };

    PollManager.prototype.C_ChangesRemovedFromBuffer = function(raw_changes) {
      var f;
      f = 'PollManager:C_ChangesRemovedFromBuffer:';
      return this.S_UnIndexChanges(raw_changes);
    };

    return PollManager;

  })();

  exports.PollManager = PollManager;

}).call(this);
