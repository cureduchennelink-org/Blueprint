// Generated by CoffeeScript 1.9.2
(function() {
  var Firebase, Promise, _, admin, mocha_creates_class_more_than_once_per_process,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  admin = require('firebase-admin');

  Promise = require('bluebird');

  _ = require('lodash');

  mocha_creates_class_more_than_once_per_process = true;

  Firebase = (function() {
    Firebase.deps = {
      services: ['logger', 'error', 'config']
    };

    function Firebase(kit) {
      this.sendToCondition = bind(this.sendToCondition, this);
      this.sendToTopic = bind(this.sendToTopic, this);
      this.sendToDeviceGroup = bind(this.sendToDeviceGroup, this);
      this.sendToDevice = bind(this.sendToDevice, this);
      var config;
      this.log = kit.services.logger.log;
      this.E = kit.services.error;
      config = kit.services.config.firebase;
      if (mocha_creates_class_more_than_once_per_process === true) {
        mocha_creates_class_more_than_once_per_process = admin.initializeApp({
          credential: admin.credential.cert(JSON.parse(config.creds)),
          databaseURL: "https://" + config.databaseName + ".firebaseio.com"
        });
      }
    }

    Firebase.prototype.sendToDevice = function(ctx, registrationTokens, payload) {
      return this._wrap(ctx, 'sendToDevice', registrationTokens, payload, {
        check_no_tokens: true
      });
    };

    Firebase.prototype.sendToDeviceGroup = function(ctx, notificationKey, payload) {
      return this._wrap(ctx, 'sendToDeviceGroup', notificationKey, payload);
    };

    Firebase.prototype.sendToTopic = function(ctx, registrationTokens, payload) {
      return this._wrap(ctx, 'sendToDeviceTopic', registrationTokens, payload);
    };

    Firebase.prototype.sendToCondition = function(ctx, conditions, payload) {
      return this._wrap(ctx, 'sendToDeviceCondition', conditions, payload);
    };

    Firebase.prototype._wrap = function(ctx, method, first_param, payload, options) {
      var f;
      f = "Firebase:_wrap:" + method;
      ctx.log.debug(f, {
        first_param: first_param,
        payload: payload,
        options: options
      });
      if (options.check_no_tokens === true) {
        if (first_param.length === 0) {
          return;
        }
      }
      return Promise.resolve().bind(this).then(function() {
        return admin.messaging()[method](first_param, payload);
      }).then(function(response) {
        ctx.log.debug(f, {
          response: response
        });
        return true;
      })["catch"](function(error) {
        ctx.log.debug(f, {
          error: error
        });
        return false;
      });
    };

    return Firebase;

  })();

  exports.Firebase = Firebase;

}).call(this);
