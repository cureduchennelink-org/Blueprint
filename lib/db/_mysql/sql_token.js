// Generated by CoffeeScript 1.9.2
(function() {
  var E, Q, SqlToken,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Q = require('q');

  E = require('../../error');

  SqlToken = (function() {
    function SqlToken(core, kit) {
      this.core = core;
      this.UpdateActiveToken = bind(this.UpdateActiveToken, this);
      this.log = kit.services.logger.log;
      this.table = 'ident_tokens';
      this.schema = {
        Create: ['token', 'ident_id', 'role', 'client', 'exp'],
        get: ['*'],
        reread: ['*']
      };
      this.core.method_factory(this, 'SqlToken');
    }

    SqlToken.prototype.GetNonExpiredToken = function(ctx, token) {
      var sql;
      sql = 'SELECT ' + (this.schema.get.join(',')) + ' FROM ' + this.table + ' WHERE token = ? AND exp > CURDATE()';
      return (this.core.sqlQuery(ctx, sql, [token])).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlToken.prototype.UpdateActiveToken = function(ctx, new_values, current_ident_token) {
      return Q.resolve().then((function(_this) {
        return function() {
          var sql;
          if (!current_ident_token) {
            return false;
          }
          sql = 'DELETE FROM ' + _this.table + ' WHERE token = ?';
          return _this.core.sqlQuery(ctx, sql, [current_ident_token]);
        };
      })(this)).then((function(_this) {
        return function(db_result) {
          var reread;
          return _this.Create(ctx, new_values, reread = true);
        };
      })(this)).then((function(_this) {
        return function(db_rec) {
          return db_rec;
        };
      })(this));
    };

    return SqlToken;

  })();

  exports.SqlToken = SqlToken;

}).call(this);
