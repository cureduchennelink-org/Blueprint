// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, SqlAuth,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  SqlAuth = (function() {
    SqlAuth.deps = {};

    function SqlAuth(core, kit) {
      this.core = core;
      this.GetById = bind(this.GetById, this);
      this.table = 'ident';
      this.cred_col = 'eml';
      this.pwd_col = 'pwd';
      this.schema = {
        auth: ['id', 'tenant', 'role', this.pwd_col],
        cred: ['*'],
        Create: [this.cred_col, this.pwd_col, 'role'],
        UpdateById: [this.cred_col, this.pwd_col],
        GetByKey: {
          id: ['id', this.cred_col, 'tenant', 'role']
        },
        reread: ['*']
      };
      this.core.method_factory(this, 'SqlAuth');
    }

    SqlAuth.prototype.GetById = function(ctx, id) {
      return this.GetByKey(ctx, 'id', [id]);
    };

    SqlAuth.prototype.GetAuthCreds = function(ctx, cred_name) {
      var f;
      f = 'DB.SqlAuth.GetAuthCreds:';
      ctx.log.debug(f, cred_name);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.auth.join(',')) + "\nFROM " + this.table + "\nWHERE " + this.cred_col + "= ? and di= 0";
        return this.core.sqlQuery(ctx, sql, [cred_name]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlAuth.prototype.GetByCredName = function(ctx, cred_name) {
      var f;
      f = 'DB.SqlAuth.GetByCredName:';
      ctx.log.debug(f, cred_name);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.cred.join(',')) + "\nFROM " + this.table + "\nWHERE " + this.cred_col + "= ? and di= 0";
        return this.core.sqlQuery(ctx, sql, [cred_name]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return SqlAuth;

  })();

  exports.SqlAuth = SqlAuth;

}).call(this);
