// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, SqlAgentHeader,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Promise = require('bluebird');

  SqlAgentHeader = (function() {
    SqlAgentHeader.deps = {
      services: ['error']
    };

    function SqlAgentHeader(core, kit) {
      this.db = core;
      this.E = kit.services.error;
      this.table = 'agent_header';
      this.schema = {
        InsertIfNew: ['browser_name', 'browser_version', 'browser_major', 'engine_name', 'engine_version', 'os_name', 'os_version', 'device_model', 'device_vendor', 'device_type', 'cpu_architecture'],
        GetByKey: {
          agent_header: ['id']
        }
      };
      this.db.method_factory(this, 'SqlAgentHeader');
    }

    SqlAgentHeader.prototype.InsertIfNew = function(ctx, agent_header, more_values) {
      var extra_cols, f, nm, val;
      f = "SqlAgentHeader.InsertIfNew:";
      ctx.log.debug(f, {
        agent_header: agent_header,
        more_values: more_values
      });
      extra_cols = this.schema.InsertIfNew;
      for (nm in more_values) {
        val = more_values[nm];
        if (indexOf.call(extra_cols, nm) < 0) {
          throw new this.db.E.DbError(f + (":BAD_INSERT_COL-" + this.table + "-" + nm));
        }
      }
      return Promise.resolve().bind(this).then(function() {
        var args, cols, qs, sql;
        cols = ['agent_header', 'agent_header_md5'];
        qs = ['?', 'MD5( ?)'];
        args = [agent_header, agent_header];
        for (nm in more_values) {
          val = more_values[nm];
          cols.push(nm);
          qs.push('?');
          args.push(val);
        }
        sql = "INSERT INTO " + this.table + " (cr, " + cols + ")\nVALUES (null, " + qs + ")\nON DUPLICATE KEY UPDATE id= id, dummy= NOT dummy";
        return this.db.sqlQuery(ctx, sql, args);
      }).then(function(db_result) {
        return db_result;
      });
    };

    return SqlAgentHeader;

  })();

  exports.SqlAgentHeader = SqlAgentHeader;

}).call(this);
