// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, SqlPSet, SqlPSetItem, SqlPSetItemChange;

  Promise = require('bluebird');

  SqlPSet = (function() {
    SqlPSet.deps = {
      services: ['error', 'logger']
    };

    function SqlPSet(core, kit) {
      this.log = kit.services.logger.log;
      this.E = kit.services.error;
      this.db = core;
      this.table = 'psets';
      this.schema = {
        create: ['name'],
        get_by_id: ['*']
      };
      this.db.method_factory(this, 'SqlPSet');
    }

    SqlPSet.prototype.get_by_name = function(ctx, name) {
      var f;
      f = "DB:SqlPushSet:get_by_name:";
      this.log.debug(f, name);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT * FROM " + this.table + " WHERE name= ? AND di= 0";
        return this.db.sqlQuery(ctx, sql, [name]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSet.prototype.read_or_insert = function(ctx, name) {
      var _log, existing_pset, f;
      f = "DB:SqlPushSet:read_or_insert:";
      _log = ctx.log;
      _log.debug(f, name);
      existing_pset = false;
      return Promise.resolve().bind(this).then(function() {
        return this.get_by_name(ctx, name);
      }).then(function(db_rows) {
        _log.debug(f, 'got existing PSet:', db_rows);
        if (db_rows.length > 0) {
          existing_pset = db_rows[0];
        }
        if (existing_pset) {
          return false;
        }
        return this.create(ctx, {
          name: name
        });
      }).then(function(db_result) {
        var id;
        _log.debug(f, 'got create PSet result:', db_result);
        if (db_result === false) {
          return false;
        }
        id = db_result.insertId;
        return this.get_by_id(ctx, id);
      }).then(function(db_rows) {
        _log.debug(f, 'got re-read:', db_rows);
        if (db_rows !== false) {
          if (db_rows.length !== 1) {
            throw new this.E.DbError('DB:PUSHSET:REREAD');
          }
          existing_pset = db_rows[0];
        }
        return existing_pset;
      });
    };

    return SqlPSet;

  })();

  exports.SqlPSet = SqlPSet;

  SqlPSetItem = (function() {
    function SqlPSetItem(core, kit) {
      this.log = kit.services.logger.log;
      this.db = core;
      this.table = 'pset_items';
      this.schema = {
        create: ['pset_id', 'xref'],
        get_by_id: ['*'],
        id_xref: ['*'],
        get_psid: ['*'],
        update_by_id: ['count']
      };
      this.db.method_factory(this, 'SqlPSetItem');
    }

    SqlPSetItem.prototype.lock = function(ctx, id) {
      var _log, f;
      f = "DB:SqlPSetItem:lock:";
      _log = ctx.log;
      _log.debug(f, id);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT id FROM " + this.table + "\nWHERE id= ? AND di= 0 FOR UPDATE";
        return this.db.sqlQuery(ctx, sql, [id]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSetItem.prototype.get_psid_xref = function(ctx, pset_id, xref) {
      var _log, f;
      f = "DB:SqlPSetItem:get_id_xref:";
      _log = ctx.log;
      _log.debug(f, pset_id, xref);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.id_xref.join(',')) + " \nFROM " + this.table + "\nWHERE pset_id= ? AND xref= ? AND di= 0";
        return this.db.sqlQuery(ctx, sql, [pset_id, xref]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSetItem.prototype.get_by_psid = function(ctx, pset_id) {
      var _log, f;
      f = "DB:SqlPSetItem:get_by_psid:";
      _log = ctx.log;
      _log.debug(f, pset_id);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.get_psid.join(',')) + "\nFROM " + this.table + "\nWHERE pset_id= ? AND di= 0";
        return this.db.sqlQuery(ctx, sql, [pset_id]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSetItem.prototype.delete_pset = function(ctx, pset_id) {
      var _log, f;
      f = "DB:SqlPSetItem:delete_pset:";
      _log = ctx.log;
      _log.debug(f, pset_id);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "DELETE FROM " + this.table + "\nWHERE pset_id= ?";
        return this.db.sqlQuery(ctx, sql, [pset_id]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return SqlPSetItem;

  })();

  exports.SqlPSetItem = SqlPSetItem;

  SqlPSetItemChange = (function() {
    function SqlPSetItemChange(core, kit) {
      this.log = kit.services.logger.log;
      this.db = core;
      this.table = 'pset_item_changes';
      this.schema = {
        recent: ['*'],
        create: ['pset_id', 'pset_item_id', 'verb', 'tbl', 'tbl_id', 'prev', 'after', 'resource'],
        next: ['id as count', 'pset_id', 'pset_item_id', 'tbl_id as id', 'verb', 'resource', 'prev', 'after']
      };
      this.db.method_factory(this, 'SqlPSetItemChange');
    }

    SqlPSetItemChange.prototype.delete_items = function(ctx, item_ids) {
      var _log, f;
      f = "DB:SqlPSetItemChange:delete_items:";
      _log = ctx.log;
      _log.debug(f, item_ids);
      if (!item_ids.length) {
        return {
          affectedRows: 0
        };
      }
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "DELETE FROM " + this.table + "\nWHERE pset_item_id IN (?)";
        return this.db.sqlQuery(ctx, sql, [item_ids]);
      }).then(function(db_result) {
        return db_result;
      });
    };

    SqlPSetItemChange.prototype.GetMostRecentForItem = function(ctx, pset_id, pset_item_id) {
      var f;
      f = "DB:SqlPSetItemChange:GetMostRecentForItem:";
      ctx.log.debug(f);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.recent.join(',')) + "\nFROM " + this.table + "\nWHERE di= 0 AND pset_id= ? AND pset_item_id= ?\nORDER BY id DESC LIMIT 1";
        return this.db.sqlQuery(ctx, sql, [pset_id, pset_item_id]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSetItemChange.prototype.GetMostRecentChanges = function(ctx, limit) {
      var f;
      f = "DB:SqlPSetItemChange:GetMostRecentChanges:";
      ctx.log.debug(f);
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.next.join(',')) + "\nFROM (SELECT * FROM " + this.table + "\n	  WHERE di= 0\n	  ORDER BY id DESC LIMIT ?) sub\nORDER BY id ASC";
        return this.db.sqlQuery(ctx, sql, [limit]);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    SqlPSetItemChange.prototype.GetNext = function(ctx, from, limit) {
      var args, f, sql_from, sql_limit;
      f = "DB:SqlPSetItemChange:GetNext:";
      args = [];
      sql_from = '';
      sql_limit = '';
      if (typeof from === 'number') {
        sql_from = ' AND id > ?';
        args.push(from);
      }
      if (typeof limit === 'number') {
        sql_limit = 'LIMIT ?';
        args.push(limit);
      }
      return Promise.resolve().bind(this).then(function() {
        var sql;
        sql = "SELECT " + (this.schema.next.join(',')) + "\nFROM " + this.table + "\nWHERE di= 0 " + sql_from + " \nORDER BY count " + sql_limit;
        return this.db.sqlQuery(ctx, sql, args);
      }).then(function(db_rows) {
        return db_rows;
      });
    };

    return SqlPSetItemChange;

  })();

  exports.SqlPSetItemChange = SqlPSetItemChange;

}).call(this);
