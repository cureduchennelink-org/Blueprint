// Generated by CoffeeScript 1.9.2
(function() {
  var Db, MongoClient, path;

  path = require('path');

  MongoClient = false;

  Db = (function() {
    Db.deps = {
      services: ['logger', 'config']
    };

    function Db(kit) {
      var SqlCore, config, core, i, j, len, len1, log, mod, modPath, model, nm, ref, ref1, ref2;
      log = kit.services.logger.log;
      config = kit.services.config;
      core = require(config.db.type === 'psql' ? './_postgresql/psql_core' : './_mysql/sql_core');
      this.config_mongo = false;
      if (config.db.mysql.enable) {
        log.info('Initializing MySql...');
        SqlCore = core.SqlCore;
        this.mysql = {
          core: new SqlCore(kit, config.db.mysql.pool)
        };
        ref = config.db.mysql.mods_enabled;
        for (i = 0, len = ref.length; i < len; i++) {
          nm = ref[i];
          mod = config.db.mysql.modules[nm];
          if (!mod) {
            throw new Error('UNKNOW MYSQL MODULE:' + nm);
          }
          mod.name = nm;
          modPath = path.join(config.processDir, mod.file);
          log.info("Loading MySql module " + nm + "@" + modPath + "::" + mod["class"]);
          this.mysql[nm] = new (require(modPath))[mod["class"]](this.mysql.core, kit);
        }
      }
      if (config.db.psql.enable) {
        log.info('Initializing PostgreSql...');
        SqlCore = core.PostgreSqlCore;
        this.psql = {
          core: new SqlCore(kit, config.db.psql.pool)
        };
        ref1 = config.db.psql.mods_enabled;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          nm = ref1[j];
          mod = config.db.psql.modules[nm];
          if (!mod) {
            throw new Error('UNKNOW POSTGRESQL MODULE:' + nm);
          }
          mod.name = nm;
          modPath = path.join(config.processDir, mod.file);
          log.info("Loading PostgreSql module " + nm + "@" + modPath + "::" + mod["class"]);
          this.psql[nm] = new (require(modPath))[mod["class"]](this.psql.core, kit);
        }
      }
      if (config.db.mongo.enable) {
        this.config_mongo = config.db.mongo;
        log.info('Initializing MongoDB...', {
          config_mongo: this.config_mongo
        });
        MongoClient = require('mongodb').MongoClient;
        this.mongo = {
          pool: {}
        };
        ref2 = config.db.mongo.models;
        for (nm in ref2) {
          model = ref2[nm];
          if (!model.enable) {
            continue;
          }
          modPath = path.join(config.processDir, model.file);
          this.mongo[nm] = (require(modPath)).init(mongoose, this.mongo.pool);
        }
      }
    }

    Db.prototype.server_init_promise = function(kit, promise_chain) {
      var f, nm, pool, ref;
      f = 'Db:server_init';
      if (this.config_mongo === false) {
        return promise_chain;
      }
      ref = this.config_mongo.pool;
      for (nm in ref) {
        pool = ref[nm];
        if (!pool.enable) {
          continue;
        }
        promise_chain = promise_chain.then((function(_this) {
          return function() {
            return MongoClient.connect(pool.connect_url, pool.options);
          };
        })(this));
        promise_chain = promise_chain.then((function(_this) {
          return function(db) {
            if (db == null) {
              throw new Error(f + 'MongoDB connection is empty');
            }
            return _this.mongo.pool[nm] = db;
          };
        })(this));
      }
      return promise_chain;
    };

    return Db;

  })();

  exports.Db = Db;

}).call(this);
