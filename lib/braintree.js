// Generated by CoffeeScript 1.9.2
(function() {
  var BraintreeService, Promise, braintree;

  Promise = require('bluebird');

  braintree = require('braintree');

  BraintreeService = (function() {
    BraintreeService.deps = {
      services: ['error', 'logger', 'db', 'auth', 'config', 'tokenMgr'],
      mysql: ['ident', 'vendor']
    };

    function BraintreeService(kit) {
      this.E = kit.services.error;
      this.log = kit.services.logger.log;
      this.sdb = kit.services.db.mysql;
      this.auth = kit.services.auth;
      this.config = kit.services.config;
      this.tokenMgr = kit.services.tokenMgr;
      this.user_id = false;
      this.client_token = false;
      this.gateway = braintree.connect({
        environment: braintree.Environment[this.config.braintree.environment],
        merchantId: this.config.braintree.merchant_id,
        publicKey: this.config.braintree.public_key,
        privateKey: this.config.braintree.private_key
      });
    }

    BraintreeService.prototype.get_client_token = function(ctx, braintree_id) {
      return Promise.resolve().bind(this).then(function() {
        return this.gateway.clientToken.generate(braintree_id !== null ? {
          customerId: braintree_id
        } : {});
      })["catch"](function(e) {
        return this.handleErrors(ctx, e);
      });
    };

    BraintreeService.prototype.add_payment_method = function(ctx, nonce, user) {
      var braintree_id, eml, f, fnm, id, lnm, return_values;
      f = 'BraintreeWrapper:add_payment_method';
      id = user.id, braintree_id = user.braintree_id, fnm = user.fnm, lnm = user.lnm, eml = user.eml;
      return_values = {};
      if (braintree_id === null) {
        return Promise.resolve().bind(this).then(function() {
          this.log.debug(f, {
            fnm: fnm,
            lnm: lnm,
            nonce: nonce,
            eml: eml
          });
          return this.gateway.customer.create({
            firstName: fnm,
            lastName: lnm,
            paymentMethodNonce: nonce,
            email: eml
          });
        }).then(function(response) {
          var new_user_values;
          this.log.debug(f, {
            response: response
          });
          if (!response.success) {
            this.handleErrors(ctx, response.message);
          }
          new_user_values = {
            braintree_id: response.customer.id
          };
          return_values.braintree_id = response.customer.id;
          return this.sdb.vendor.update_by_ident_id(ctx, id, new_user_values, true);
        }).then(function(db_rows) {
          this.log.debug(f, {
            db_rows: db_rows
          });
          if (!db_rows) {
            this.handleErrors(ctx, 'BRAINTREESERVICE:USER_DID_NOT_UPDATE');
          }
          return this.get_client_token(ctx, return_values.braintree_id);
        }).then(function(response) {
          return_values.token = response.clientToken;
          return return_values;
        })["catch"](function(e) {
          return this.handleErrors(ctx, e);
        });
      } else if (braintree_id) {
        return Promise.resolve().bind(this).then(function() {
          this.log.debug(f, {
            braintree_id: braintree_id,
            nonce: nonce
          });
          return this.gateway.paymentMethod.create({
            customerId: braintree_id,
            paymentMethodNonce: nonce
          });
        }).then(function(response) {
          this.log.debug(f, {
            response: response
          });
          if (!response.success) {
            this.handleErrors(ctx, response.message);
          }
          return {};
        })["catch"](function(e) {
          return this.handleErrors(ctx, e);
        });
      } else {
        throw new this.E.ServerError('BRAINTREE:ADD_PAYMENT_METHOD:INVALID_BRAINTREE_ID');
      }
    };

    BraintreeService.prototype.delete_payment_method = function(ctx, nonce, auth_id) {
      var f;
      f = 'BraintreeWrapper:delete_payment_method';
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.vendor.get_by_ident_id(ctx, auth_id);
      }).then(function(db_rows) {
        var braintree_id;
        if (db_rows.length !== 1) {
          throw new this.E.NotFoundError('BRAINTREE:ADD_PAYMENT_METHOD::USER_NOT_FOUND');
        }
        braintree_id = db_rows[0].braintree_id;
        return this.gateway.paymentMethod.create({
          customerId: braintree_id,
          paymentMethodNonce: nonce
        });
      }).then(function(response) {
        this.log.debug(f, {
          response: response
        });
        if (!response.success) {
          this.handleErrors(ctx, response.message);
        }
        return this.gateway.paymentMethod["delete"](response.paymentMethod.token);
      })["catch"](function(e) {
        return this.handleErrors(ctx, e);
      });
    };

    BraintreeService.prototype.create_transaction = function(ctx, line_items, nonce, total) {
      var f;
      f = 'BRAINTREE_SERVICE:CREATE_TRANSACTION::';
      return Promise.resolve().bind(this).then(function() {
        return this.gateway.transaction.sale({
          amount: total,
          paymentMethodNonce: nonce,
          options: {
            submitForSettlement: true
          },
          lineItems: line_items
        });
      }).then(function(response) {
        ctx.log.debug(f, {
          response: response
        });
        if (!response.success) {
          this.handleErrors(ctx, response.message);
        }
        return response;
      })["catch"](function(e) {
        return this.handleErrors(ctx, e);
      });
    };

    BraintreeService.prototype.get_transaction = function(ctx, transaction_id) {
      var f;
      f = 'BRAINTREE_SERVICE:GET_TRANSACTION::';
      return Promise.resolve().bind(this).then(function() {
        return this.gateway.transaction.find(transaction_id.toString());
      }).then(function(response) {
        ctx.log.debug(f, {
          response: response
        });
        if (!response.success) {
          this.handleErrors(ctx, response.message);
        }
        return response.transaction;
      })["catch"](function(e) {
        return this.handleErrors(ctx, e);
      });
    };

    BraintreeService.prototype.get_transaction_line_items = function(ctx, transaction_id) {
      var f;
      f = 'BRAINTREE_SERVICE:GET_TRANSACTION_LINE_ITEMS::';
      return Promise.resolve().bind(this).then(function() {
        return this.gateway.transactionLineItem.findAll(transaction_id.toString());
      }).then(function(response) {
        ctx.log.debug(f, {
          response: response
        });
        return response;
      })["catch"](function(e) {
        return this.handleErrors(ctx, e);
      });
    };

    BraintreeService.prototype.handleErrors = function(ctx, e) {
      var f;
      f = "TIB/r_braintree:BraintreeWrapper::handleErrors";
      ctx.log.error(f, {
        e: e
      });
      throw new this.E.ServerError('BraintreeWrapper::handleErrors', e);
    };

    return BraintreeService;

  })();

  exports.BraintreeService = BraintreeService;

}).call(this);
