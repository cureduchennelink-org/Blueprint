// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, Push, PushSet, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  _ = require('lodash');

  Push = (function() {
    Push.deps = {
      mysql: ['pset', 'pset_item', 'pset_item_change'],
      services: ['error', 'util'],
      config: 'push_service[poll_interval,max_buffer_size,poll_limit]'
    };

    function Push(kit) {
      this.S_Poll = bind(this.S_Poll, this);
      var f;
      f = 'BL/Push.constructor:';
      this.config = kit.services.config.push_service;
      this.E = kit.services.error;
      this.sdb = kit.services.db.mysql;
      this.util = kit.services.util;
      this.interval = this.config.poll_interval;
      this.interested_parties = [];
      this.pset_by_name = {};
      this.count = 0;
      this.ctx = {
        conn: null,
        log: kit.services.logger.log
      };
    }

    Push.prototype.server_init = function(kit) {
      var f;
      f = 'Push:server_init';
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.core.Acquire();
      }).then(function(c) {
        return this.ctx.conn = c;
      });
    };

    Push.prototype.server_start = function(kit) {
      var f;
      f = 'Push:server_start';
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset_item_change.GetMostRecentChanges(this.ctx, 1);
      }).then(function(db_rows) {
        this.ctx.log.debug(f, 'got latest item_change', db_rows);
        if (db_rows.length) {
          this.count = db_rows[0].count;
        }
        if (!db_rows.length) {
          return [];
        }
        return this.sdb.pset_item_change.GetMostRecentChanges(this.ctx, this.config.max_buffer_size);
      }).then((function(_this) {
        return function(db_rows) {
          var cb, i, len, ref;
          if (!db_rows.length) {
            return false;
          }
          ref = _this.interested_parties;
          for (i = 0, len = ref.length; i < len; i++) {
            cb = ref[i];
            cb(db_rows);
          }
          return null;
        };
      })(this)).then((function(_this) {
        return function() {
          return _this.Start();
        };
      })(this));
    };

    Push.prototype.RegisterForChanges = function(cb) {
      return this.interested_parties.push(cb);
    };

    Push.prototype.GetPushSet = function(clear_pset, nm) {
      var f, pset, pset_id, ref;
      f = 'Push:GetPushSet:';
      this.ctx.log.debug(f, {
        clear_pset: clear_pset
      }, nm);
      pset_id = false;
      pset = (ref = this.pset_by_name[nm]) != null ? ref : false;
      if (pset && !clear_pset) {
        return pset;
      }
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset.read_or_insert(this.ctx, nm);
      }).then(function(pset_rec) {
        this.pset_by_name[nm] = new PushSet(this.E, this.sdb, pset_rec, this.util);
        pset_id = pset_rec.id;
        if (!clear_pset) {
          return false;
        }
        return this.S_CleanPushSet(this.ctx, pset_id);
      }).then(function(clean_result) {
        this.ctx.log.debug(f, 'got clean_result:', clean_result);
        return this.pset_by_name[nm];
      });
    };

    Push.prototype.Start = function() {
      return this.timer = setTimeout(this.S_Poll, this.interval);
    };

    Push.prototype.S_Poll = function() {
      var f, fromId, limit;
      f = 'Push:Poll';
      limit = this.config.poll_limit;
      fromId = this.count;
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset_item_change.GetNext(this.ctx, fromId, limit);
      }).then(function(db_rows) {
        var cb, i, len, ref;
        if (db_rows.length) {
          this.count = db_rows[db_rows.length - 1].count;
        }
        if (!db_rows.length) {
          return false;
        }
        ref = this.interested_parties;
        for (i = 0, len = ref.length; i < len; i++) {
          cb = ref[i];
          cb(db_rows);
        }
        return null;
      }).then(function() {
        return this.timer = setTimeout(this.S_Poll, this.interval);
      })["catch"](function(e) {
        return this.ctx.log.error(f, e, e.stack);
      });
    };

    Push.prototype.S_CleanPushSet = function(ctx, pset_id) {
      var f, item_ids;
      f = 'Push:S_CleanPushSet';
      ctx.log.debug(f, {
        pset_id: pset_id
      });
      item_ids = [];
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset_item.get_by_psid(ctx, pset_id);
      }).then(function(db_rows) {
        var i, len, row;
        ctx.log.debug(f, 'got item ids:', db_rows);
        for (i = 0, len = db_rows.length; i < len; i++) {
          row = db_rows[i];
          item_ids.push(row.id);
        }
        return this.sdb.pset_item_change.delete_items(ctx, item_ids);
      }).then(function(db_result) {
        ctx.log.debug(f, 'got delete changes:', db_result);
        return this.sdb.pset_item.delete_pset(ctx, pset_id);
      }).then(function(db_result) {
        ctx.log.debug(f, 'got delete items:', db_result);
        return true;
      });
    };

    return Push;

  })();

  PushSet = (function() {
    function PushSet(E, sdb, pset1, util) {
      this.E = E;
      this.sdb = sdb;
      this.pset = pset1;
      this.util = util;
      this.c_items = {};
    }

    PushSet.prototype.ItemChange = function(ctx, xref, verb, prev, now, resource, tbl_id, tbl) {
      var after, before, f, pset_item_id, ref;
      f = "PushSet:" + this.pset.name + ":ItemChange:";
      ctx.log.debug(f, {
        xref: xref,
        verb: verb,
        resource: resource,
        tbl_id: tbl_id,
        tbl: tbl
      });
      pset_item_id = false;
      ref = this.util.Diff(prev, now), before = ref[0], after = ref[1];
      ctx.log.debug(f, {
        before: before,
        after: after
      });
      if ((_.isEmpty(after)) && verb === 'update') {
        return false;
      }
      return Promise.resolve().bind(this).then(function() {
        return this.S_GetItem(ctx, xref);
      }).then(function(item_rec) {
        ctx.log.debug(f, {
          item_rec: item_rec
        });
        pset_item_id = item_rec.id;
        return this.sdb.pset_item.lock(ctx, pset_item_id);
      }).then(function(db_rows) {
        var new_change;
        if (db_rows.length !== 1) {
          throw new this.E.DbError('PUSHSET:ITEMCHANGE:BAD_LOCK');
        }
        before = JSON.stringify(before);
        after = JSON.stringify(after);
        new_change = {
          pset_id: this.pset.id,
          pset_item_id: pset_item_id,
          verb: verb,
          prev: before,
          after: after,
          resource: resource,
          tbl_id: tbl_id,
          tbl: tbl
        };
        return this.sdb.pset_item_change.create(ctx, new_change);
      }).then(function(db_result) {
        return this.sdb.pset_item.update_by_id(ctx, pset_item_id, {
          count: db_result.insertId
        });
      }).then(function(db_result) {
        if (db_result.affectedRows !== 1) {
          throw new this.E.DbError('PUSHSET:ITEMCHANGE:UPDATE_COUNT');
        }
        return null;
      });
    };

    PushSet.prototype.GetPushHandle = function(ctx, xref) {
      var f, item, item_change;
      f = "PushSet:" + this.pset.name + ":GetPushHandle:";
      item = false;
      item_change = false;
      return Promise.resolve().bind(this).then(function() {
        return this.S_GetItem(ctx, xref);
      }).then(function(item_rec) {
        item = item_rec;
        return this.sdb.pset_item_change.GetMostRecentForItem(ctx, this.pset.id, item.id);
      }).then(function(db_rows) {
        if (!db_rows.length) {
          throw new this.E.ServerError("PUSHSET:GET_HANDLE:NO_LATEST_CHANGE", this.pset.id + "/" + item.id + "/?");
        }
        item_change = db_rows[0];
        return this.pset.id + "/" + item.id + "/" + item_change.id;
      });
    };

    PushSet.prototype.S_GetItem = function(ctx, xref) {
      var f, item, ref, sxref;
      f = "PushSet:" + this.pset.name + ":S_GetItem:";
      ctx.log.debug(f, xref);
      sxref = String(xref);
      item = (ref = this.c_items[sxref]) != null ? ref : false;
      if (item) {
        return item;
      }
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset_item.get_psid_xref(ctx, this.pset.id, sxref);
      }).then(function(db_rows) {
        ctx.log.debug(f, 'got pset_item:', db_rows);
        if (db_rows.length) {
          this.c_items[sxref] = db_rows[0];
          return false;
        }
        return this.S_CreateItem(ctx, sxref);
      }).then(function(new_handle) {
        ctx.log.debug(f, 'got new_handle:', new_handle);
        if (new_handle !== false) {
          this.c_items[sxref] = new_handle;
        }
        return this.c_items[sxref];
      });
    };

    PushSet.prototype.S_CreateItem = function(ctx, xref) {
      var f, handle, pset_id;
      f = "PushSet:" + this.pset.name + ":S_CreateItem:";
      ctx.log.debug(f, xref);
      pset_id = this.pset.id;
      handle = false;
      return Promise.resolve().bind(this).then(function() {
        return this.sdb.pset_item.create(ctx, {
          pset_id: pset_id,
          xref: xref
        });
      }).then(function(db_result) {
        var id;
        ctx.log.debug(f, 'got create pset item result:', db_result);
        id = db_result.insertId;
        return this.sdb.pset_item.get_by_id(ctx, id);
      }).then(function(db_rows) {
        var after, prev, resource, tbl, tbl_id;
        ctx.log.debug(f, 'got re-read:', db_rows);
        if (db_rows.length !== 1) {
          throw new this.E.DbError('PUSHSET:CREATE_ITEM:REREAD');
        }
        handle = db_rows[0];
        prev = {};
        after = {};
        resource = null;
        tbl_id = null;
        tbl = null;
        return this.ItemChange(ctx, xref, 'init', prev, after, resource, tbl_id, tbl);
      }).then(function() {
        return handle;
      });
    };

    return PushSet;

  })();

  exports.Push = Push;

}).call(this);
