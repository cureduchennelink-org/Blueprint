// Generated by CoffeeScript 1.8.0
(function() {
  var MongoClient, MongoLogger, MongoLoggerFactory;

  MongoClient = require('mongodb').MongoClient;

  MongoLoggerFactory = (function() {
    function MongoLoggerFactory(kit) {
      var config;
      config = kit.services.config;
      this.config = config;
      this.mongoLogger = MongoLogger;
      return;
    }

    MongoLoggerFactory.prototype.make = function() {
      console.log(this.config);
      return new this.mongoLogger(this.config);
    };

    return MongoLoggerFactory;

  })();

  MongoLogger = (function() {
    function MongoLogger(config) {
      var logLevels, self;
      self = this;
      self.config = config;
      logLevels = {
        'trace': 10,
        'debug': 20,
        'info': 30,
        'warn': 40,
        'error': 50,
        'fatal': 60
      };
      MongoClient.connect(self.config.db.mongo.options, function(err, connection) {
        self.connection = connection;
        if (err) {
          console.error(err);
          throw new Error(err);
          return;
        }
        if (!self.connection) {
          console.error('Connection not established');
          throw new Error('Connection not established');
          return;
        }
        self.collection = self.connection.collection(self.config.mongoLog.name);
        self.batch = self.collection.initializeOrderedBulkOp();
        self.log('Logger Initialized...');
        console.log('Mongo logging');
      });
    }

    MongoLogger.prototype.log = function(data) {
      var row, self;
      self = this;
      row = {
        data: data
      };
      self.batch.insert(row);
      console.log('logging', row);
    };

    MongoLogger.prototype.close = function() {
      var self;
      self = this;
      if (self.batch) {
        return self.batch.execute(function(err, result) {
          if (err) {
            console.error(err);
            throw new Error(err);
          }
          console.log('closing', result);
          self.connection.close();
        });
      }
    };

    return MongoLogger;

  })();

  exports.MongoLoggerFactory = MongoLoggerFactory;

}).call(this);
