// Generated by CoffeeScript 1.9.2
(function() {
  var Lamd, MongoClient, Promise, _,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  _ = require('lodash');

  MongoClient = require('mongodb').MongoClient;

  Lamd = (function() {
    Lamd.deps = {
      services: ['logger'],
      config: 'lamd{connect_url,connect_db,options}'
    };

    function Lamd(kit) {
      this.read = bind(this.read, this);
      this.write = bind(this.write, this);
      this.server_init = bind(this.server_init, this);
      var f;
      f = 'Lamd:constructor';
      this.config = kit.services.config.lamd;
      this.log = kit.services.logger.log;
      this.db = false;
      this.collection_debug = false;
    }

    Lamd.prototype.server_init = function(kit) {
      var f, server;
      f = 'Lamd:server_init:';
      server = kit.services.server.server;
      return Promise.resolve().bind(this).then(function() {
        var ref;
        return MongoClient.connect(this.config.connect_url, (ref = this.config.options) != null ? ref : {});
      }).then(function(client) {
        if (client != null) {
          this.log.debug('Successfully connected to MongoDB database.');
        }
        if (client == null) {
          throw new Error(f + 'MongoDB connection is empty');
        }
        this.log.debug(f, _.pick(client.s, ['url', 'options']));
        this.db = client.db(this.config.connect_db);
        this.log.debug(f, _.pick(this.db, ['databaseName', 'options']));
        return this.collection_debug = this.db.collection('debug');
      });
    };

    Lamd.prototype.write = function(data) {
      var err, f;
      f = 'Lamd:write:';
      try {
        return this._write(data);
      } catch (_error) {
        err = _error;
        return this.log.warn(f + 'err', err);
      }
    };

    Lamd.prototype._write = function(data) {
      var f;
      f = 'Lamd:_write:';
      return this.collection_debug.insertOne(data, {
        forceServerObjectId: true
      }, (function(_this) {
        return function(err, result) {
          if (err != null) {
            _this.log.debug(f, {
              err: err,
              result: result
            });
          }
          if (_this.config.to_debug) {
            return _this.log.debug(f, data);
          }
        };
      })(this));
    };

    Lamd.prototype.read = function(ctx, method, query, projection, options, hint, sort) {
      var f;
      f = 'Lamd-Custom:read:';
      ctx.log.debug(f, {
        method: method,
        query: query,
        projection: projection,
        options: options,
        hint: hint,
        sort: sort
      });
      if (method === "find") {
        query = (ctx.pool.db().collection("debug")).find(query).project(projection);
        if (sort) {
          query = query.sort(sort);
        }
        query = query.limit(100);
        if (hint) {
          query = query.hint(hint);
        }
        query = query.toArray();
        return query.then(function(docs) {
          ctx.log.debug(f, {
            docs: docs
          });
          return docs;
        });
      } else if (method === "aggregate") {
        query = (ctx.pool.db().collection("debug")).aggregate(query, options);
        query = query.toArray();
        return query.then(function(docs) {
          ctx.log.debug(f, {
            docs: docs
          });
          return docs;
        });
      }
    };

    return Lamd;

  })();

  exports.Lamd = Lamd;

}).call(this);
