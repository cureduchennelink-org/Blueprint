// Generated by CoffeeScript 1.9.2
(function() {
  var Interceptor,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Interceptor = (function() {
    Interceptor.deps = {
      services: ['logger']
    };

    function Interceptor(kit) {
      this.intercept = bind(this.intercept, this);
      this.logger = kit.services.logger;
    }

    Interceptor.prototype.intercept = function(agent) {
      var logger;
      agent.interceptors.request.use(function(config) {
        var f;
        f = 'interceptors.request.BEFORE';
        logger.log.debug(f, {
          timeout: config.timeout,
          headers_common: config.headers.common,
          method: config.method,
          headers_method: config.headers[config.method],
          baseURL: config.baseURL,
          url: config.url,
          data: config.data
        });
        return config;
      }, function(error) {
        var f;
        f = 'interceptors.request.ERROR';
        logger.log.debug(f, {
          error: error
        });
        return Promise.reject(error);
      });
      agent.interceptors.response.use(function(response) {
        var f;
        f = 'interceptors.response.AFTER';
        logger.log.debug(f, {
          status: response.status,
          headers_set_cookie: response.headers['set-cookie'],
          request_ClientRequest__header: response.request._header,
          data: response.data
        });
        return response;
      }, function(error) {
        var f;
        f = 'interceptors.response.ERROR';
        if (!error.conig) {
          logger.log.debug(f, {
            error: error
          });
        }
        logger.log.debug(f, {
          response: error.response,
          _header: error.request._header
        });
        return Promise.reject(error);
      });
      return logger = this.logger;
    };

    return Interceptor;

  })();

  exports.Interceptor = Interceptor;

}).call(this);
