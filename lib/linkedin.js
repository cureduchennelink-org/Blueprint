// Generated by CoffeeScript 1.9.2
(function() {
  var LinkedinService, Promise, querystring, request,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Promise = require('bluebird');

  request = require('request-promise');

  querystring = require('querystring');

  LinkedinService = (function() {
    LinkedinService.deps = {
      services: ['error', 'logger', 'auth', 'config']
    };

    function LinkedinService(kit) {
      this.get_linkedin_user_email = bind(this.get_linkedin_user_email, this);
      this.get_linkedin_user = bind(this.get_linkedin_user, this);
      this.get_access_token = bind(this.get_access_token, this);
      this.E = kit.services.error;
      this.log = kit.services.logger.log;
      this.auth = kit.services.auth;
      this.config = kit.services.config;
    }

    LinkedinService.prototype.get_access_token = function(ctx, authorization_code) {
      var _log, data, f, opts;
      f = 'LinkedinService:_get_access_token';
      _log = ctx.log;
      data = querystring.stringify({
        grant_type: 'authorization_code',
        code: authorization_code,
        redirect_uri: this.config.ses.options.urlPrefix + "/linkedinreturn",
        client_id: this.config.linkedin.client_id,
        client_secret: this.config.linkedin.client_secret
      });
      opts = {
        uri: 'https://www.linkedin.com/oauth/v2/accessToken',
        method: 'POST',
        headers: {
          'Content-Length': Buffer.byteLength(data)
        },
        json: true,
        form: data
      };
      _log.debug(f, opts);
      return request(opts).then(function(data) {
        _log.debug(data);
        return data;
      })["catch"]((function(_this) {
        return function(e) {
          return _this.handleErrors(ctx, e);
        };
      })(this));
    };

    LinkedinService.prototype.get_linkedin_user = function(ctx, accessToken) {
      var f, opts;
      f = 'LinkedinService:_get_linkedin_user';
      opts = {
        uri: 'https://api.linkedin.com/v2/me?projection=(id,firstName,lastName,profilePicture(displayImage~:playableStreams))',
        method: 'GET',
        headers: {
          Connection: 'Keep-Alive',
          Authorization: 'Bearer ' + accessToken
        },
        json: true
      };
      this.log.debug(f, opts);
      return request(opts).then((function(_this) {
        return function(data) {
          _this.log.debug(f, {
            data: data
          });
          return data;
        };
      })(this))["catch"]((function(_this) {
        return function(e) {
          return _this.handleErrors(ctx, e);
        };
      })(this));
    };

    LinkedinService.prototype.get_linkedin_user_email = function(ctx, accessToken) {
      var f, opts;
      f = 'LinkedinService:get_linkedin_user_email';
      opts = {
        uri: 'https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))',
        method: 'GET',
        headers: {
          Connection: 'Keep-Alive',
          Authorization: 'Bearer ' + accessToken
        },
        json: true
      };
      this.log.debug(f, opts);
      return request(opts).then((function(_this) {
        return function(data) {
          _this.log.debug(f, {
            data: data
          });
          return data;
        };
      })(this))["catch"]((function(_this) {
        return function(e) {
          return _this.handleErrors(ctx, e);
        };
      })(this));
    };

    LinkedinService.prototype.handleErrors = function(ctx, e) {
      var f;
      f = "LinkedinService::handleErrors";
      ctx.log.error(f, {
        e: e
      });
      throw new this.E.ServerError(f, e);
    };

    return LinkedinService;

  })();

  exports.LinkedinService = LinkedinService;

}).call(this);
