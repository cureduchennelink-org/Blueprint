// Generated by CoffeeScript 1.9.2
(function() {
  var Promise, TokenMgr, crypto, moment, urlSafeBase64DecodeFix, urlSafeBase64EncodeFix;

  Promise = require('bluebird');

  crypto = require('crypto');

  moment = require('moment');

  urlSafeBase64DecodeFix = function(str) {
    return str.replace(/-/g, '+').replace(/_/g, '/');
  };

  urlSafeBase64EncodeFix = function(str) {
    return str.replace(/\+/g, '-').replace(/\//g, '_').replace(/\=/g, '');
  };

  TokenMgr = (function() {
    TokenMgr.deps = {
      services: []
    };

    function TokenMgr(kit) {
      this.CreateToken = (Promise.promisify(this.createToken)).bind(this);
    }

    TokenMgr.prototype.createToken = function(length, callback) {
      return crypto.randomBytes(length, function(err, buf) {
        if (err) {
          return callback(err);
        }
        return callback(null, urlSafeBase64EncodeFix(buf.toString('base64')));
      });
    };

    TokenMgr.prototype.encode = function(token, exp, key) {
      var data, hmac;
      token.exp = moment.isMoment(exp) ? exp.unix() : moment(exp).unix();
      data = urlSafeBase64EncodeFix(new Buffer(JSON.stringify(token), 'utf8').toString('base64'));
      hmac = crypto.createHmac('sha256', key);
      hmac.update(data);
      return data + '.' + urlSafeBase64EncodeFix(hmac.digest('base64'));
    };

    TokenMgr.prototype.decodeAndValidate = function(rawToken, key) {
      var hmac, parts, sig, token;
      parts = rawToken.split('.', 2);
      if (parts.length !== 2) {
        return {
          error: 'Bad Format'
        };
      }
      hmac = crypto.createHmac('sha256', key);
      hmac.update(parts[0]);
      sig = urlSafeBase64EncodeFix(hmac.digest('base64'));
      if (sig !== parts[1]) {
        return {
          error: 'Bad Signature'
        };
      }
      token = JSON.parse((new Buffer(urlSafeBase64DecodeFix(parts[0]), 'base64')).toString('utf8'));
      if ((isNaN(token.exp)) || token.exp < moment().unix()) {
        return {
          error: 'Token Expired'
        };
      }
      return {
        token: token
      };
    };

    return TokenMgr;

  })();

  exports.TokenMgr = TokenMgr;

}).call(this);
