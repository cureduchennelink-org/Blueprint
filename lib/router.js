// Generated by CoffeeScript 1.9.2
(function() {
  var Router, log_map, use_map,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  log_map = {
    get: 'GET ',
    post: 'POST',
    put: 'PUT ',
    del: 'DEL '
  };

  use_map = {
    get: 'GET',
    post: 'POST',
    put: 'PUT',
    del: 'DEL'
  };

  Router = (function() {
    Router.deps = {
      services: ['template_use', 'server'],
      config: 'route_prefix.api'
    };

    function Router(kit) {
      this.server_init = bind(this.server_init, this);
      this.log = kit.services.logger.log;
      this.pfx = kit.services.config.route_prefix.api;
      this.template = kit.services.template_use;
      this.server = kit.services.server.server;
      this.usage = [];
      this.usage_by_mod = {};
    }

    Router.prototype.AddRoute = function(mod, name, verb, route, func) {
      var i, len, nm, results, use_rec, use_spec, v, val, verbs;
      if (!this.usage_by_mod[mod]) {
        this.usage_by_mod[mod] = [];
      }
      use_spec = func('use');
      use_rec = {
        name: name,
        verb: use_map[verb],
        route: route,
        Param: (function() {
          var ref, results;
          ref = use_spec.params;
          results = [];
          for (nm in ref) {
            val = ref[nm];
            results.push({
              name: nm,
              format: val
            });
          }
          return results;
        })(),
        Response: (function() {
          var ref, results;
          ref = use_spec.response;
          results = [];
          for (nm in ref) {
            val = ref[nm];
            results.push({
              name: nm,
              format: val
            });
          }
          return results;
        })()
      };
      this.usage_by_mod[mod].push(use_rec);
      this.usage.push(use_rec);
      verbs = [verb];
      if (verb === 'del' || verb === 'put') {
        verbs.push('post');
      }
      results = [];
      for (i = 0, len = verbs.length; i < len; i++) {
        v = verbs[i];
        this.log.info('\t', log_map[v], this.pfx + '' + route);
        results.push(this.server[v](this.pfx + '' + route, func));
      }
      return results;
    };

    Router.prototype.make_tbl = function() {
      var mod, ref, route, route_list, table;
      table = {
        Module: []
      };
      ref = this.usage_by_mod;
      for (mod in ref) {
        route_list = ref[mod];
        table.Module.push({
          name: mod,
          Route: (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = route_list.length; i < len; i++) {
              route = route_list[i];
              results.push(route);
            }
            return results;
          })()
        });
      }
      return table;
    };

    Router.prototype.server_init = function() {
      var f;
      f = 'Router:server_init';
      return this.server['get'](this.pfx, (function(_this) {
        return function(q, r, n) {
          var body, e;
          if (q.params.format === 'json') {
            r.send(_this.usage);
          } else {
            try {
              body = _this.template.render('Usage', 'Usage', 'usage_main', _this.make_tbl());
            } catch (_error) {
              e = _error;
              _this.log.debug(e, e.stack);
              throw e;
            }
            r.writeHead(200, {
              'Content-Length': Buffer.byteLength(body),
              'Content-Type': 'text/html; charset=utf-8'
            });
            r.write(body);
            r.end();
          }
          return n();
        };
      })(this));
    };

    return Router;

  })();

  exports.Router = Router;

}).call(this);
