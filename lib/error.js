// Generated by CoffeeScript 1.9.2
(function() {
  var errors, f, my_errors, nm, val;

  errors = require('restify-errors');

  my_errors = {};

  f = 'lib/errors:';

  nm = 'ServerControlledException';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 420
    });
    return my_errors[nm] = function(old_code, title, text, commands, goto) {
      var e, message, server_control;
      if (typeof goto !== 'string') {
        throw new Error("lib/error::" + nm + ": Missing 'goto' in function arguments");
      }
      if (typeof commands !== 'string') {
        commands = commands.join('~');
      }
      server_control = {
        title: title,
        text: text,
        commands: commands,
        goto: goto
      };
      message = 'See server_control';
      e = new ec({
        message: message
      });
      e.body = {
        code: 'ServerControl',
        message: 'See server_control',
        old_code: old_code,
        server_control: server_control
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'InvalidArg';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 400
    });
    return my_errors[nm] = function(message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: nm,
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'MissingArg';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 400
    });
    return my_errors[nm] = function(message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: nm,
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'NotFoundError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 404
    });
    return my_errors[nm] = function(token, message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: nm,
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'OAuthError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 401
    });
    return my_errors[nm] = function(code, error, message) {
      var e;
      e = new ec({
        message: 'Invalid OAuth Request'
      });
      e.body = message ? {
        code: error,
        message: message
      } : {
        code: error
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'BasicAuthError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 401
    });
    return my_errors[nm] = function(error, message) {
      var body, e;
      e = new ec({
        message: 'Invalid Basic Auth Request'
      });
      e.body = body = message ? {
        code: error,
        message: message
      } : {
        code: error
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'AccessDenied';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 403
    });
    return my_errors[nm] = function(token, message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: token,
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'DbError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 500
    });
    return my_errors[nm] = function(token) {
      var e;
      e = new ec({
        message: token,
        restCode: 'DatabaseError'
      });
      e.body = {
        code: token
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'ServerError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 500
    });
    return my_errors[nm] = function(token, message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: token,
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'MongoDbError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 500
    });
    return my_errors[nm] = function(message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: 'mongo_error',
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  nm = 'TooManyConnectionsError';

  (function(nm) {
    var ec;
    ec = errors.makeConstructor(nm, {
      statusCode: 426
    });
    return my_errors[nm] = function(message) {
      var e;
      e = new ec({
        message: message
      });
      e.body = {
        code: 'too_many_connections_error',
        message: message
      };
      console.log(f + nm, e.body);
      return e;
    };
  })(nm);

  for (nm in my_errors) {
    val = my_errors[nm];
    exports[nm] = val;
  }

}).call(this);
